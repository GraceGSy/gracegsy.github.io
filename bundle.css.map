{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../AttributesBar.svelte",
    "../../AttributesConstraints.svelte",
    "../../AttributesWeight.svelte",
    "../../Constraint.svelte",
    "../../DataFields.svelte",
    "../../GranularRecommendations.svelte",
    "../../Recommendations.svelte",
    "../../Results.svelte",
    "../../ToggleSelect.svelte",
    "../../VersionConstraintSolver.svelte",
    "../../VersionGranularRecommendations.svelte",
    "../../VersionRecommendations.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from 'd3'\n\timport AttributesBar from './AttributesBar.svelte'\n\timport VersionRecommendations from './VersionRecommendations.svelte'\n\timport VersionConstraintSolver from './VersionConstraintSolver.svelte'\n\timport VersionGranularRecommendations from './VersionGranularRecommendations.svelte'\n\timport Results from './Results.svelte'\n\n\timport ResultsUMAP from './ResultsUMAP.svelte'\n\n\tlet versionChoice = \"results\"\n\t// let versionChoice = null\n\n\t// let version = 'granularLearner'\n\n\tlet participant = null\n\n\t// for constraintSolver = participant ID 1\n\t// for constraintLearner = participant ID 2\n\t// for granularLearner = participant ID 16\n\tlet participantOrder = ['constraintSolver', 'constraintLearner',\n\t\t\t\t\t\t\t'constraintSolver', 'constraintSolver',\n\t\t\t\t\t\t\t'constraintSolver', 'constraintLearner',\n\t\t\t\t\t\t\t'constraintSolver', 'constraintLearner',\n\t\t\t\t\t\t\t'constraintLearner', 'constraintSolver',\n\t\t\t\t\t\t\t'constraintLearner', 'constraintLearner',\n\t\t\t\t\t\t\t'granularLearner', 'granularLearner',\n\t\t\t\t\t\t\t'granularLearner', 'granularLearner',\n\t\t\t\t\t\t\t'granularLearner', 'granularLearner']\n\n\tlet gender = null\n\tlet ageRange = null\n\tlet tools = null\n\tlet experience = null\n\n\tlet allParticipantInfo = {}\n\tlet start = false\n\t// let start = false\n\n\tlet rand = -1;\n\tfunction getRand() {\n\t\tfetch(\"./classifier/api?param1=1&param1=2\")\n\t}\n\n\tlet selectedAttributes = []\n\tlet promise = loadData();\n\n\tfunction getType(row) {\n\t\tconst result = {}\n\n\t\tfor (let attr of Object.keys(row)) {\n\t\t\tconst value = row[attr]\n\t\t\tif (isNaN(parseFloat(value))) {\n\t\t\t\tresult[attr] ='string'\n\t\t\t} else {\n\t\t\t\tresult[attr] ='number'\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\tfunction dataPreprocessor(d) {\n\t\tlet result = {}\n\t\tfor (let i = 0; i < d3.keys(d).length; i++) {\n\t\t\tlet variableName = d3.keys(d)[i]\n\t\t\tif (variableName === 'tconst' || variableName === \"title\" || variableName === 'year') {}\n\t\t\telse if (variableName === 'type' || variableName === \"genre\") {\n\t\t\t\tresult[variableName] = d3.values(d)[i]\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult[variableName] = +d3.values(d)[i]\n\t\t\t}\n\t\t}\n\t    return result\n\t}\n\n\tasync function loadData() {\n\t\tconst dataset = await d3.csv(`movies.csv`, dataPreprocessor)\n\n\t\t// console.log(dataset)\n\n\t\tconst firstRow = dataset[0]\n\n\t\tconst types = getType(firstRow)\n\n\t\treturn {\"dataset\":dataset, \"types\":types}\n\t}\n\n\tfunction updateAttributes(event) {\n\t\tlet attribute = event.detail.attribute\n\t\t\n\t\tif (selectedAttributes.includes(attribute)) {}\n\t\telse {\n\t\t\tselectedAttributes.push(attribute)\n\t\t\tselectedAttributes = selectedAttributes\n\t\t}\n\t}\n\n\tfunction load() {\n\t\t// if (participant) {\n\t\t// \tstart = true\n\t\t// }\n\n\t\t// Uncomment for study\n\t\tif (participant && gender && ageRange && ageRange != \"<18\" && experience) {\n\t\t\tallParticipantInfo = {\"age\": ageRange,\n\t\t\t\t\t\t\t\t  \"gender\": gender,\n\t\t\t\t\t\t\t\t  \"tools\": tools,\n\t\t\t\t\t\t\t\t  \"experience\": experience}\n\t\t\tstart = true\n\t\t}\n\t}\n</script>\n\n<div style=\"padding: '20px'\">\n\t\n\t<!--<div id=\"versioning\">\n\t\t<label class=\"versionOption\">\n\t\t\t<input type=radio bind:group={version} value={\"constraintSolver\"}>\n\t\t\tConstraint Solver\n\t\t</label>\n\t\t<label class=\"versionOption\">\n\t\t\t<input type=radio bind:group={version} value={\"constraintLearner\"}>\n\t\t\tConstraint Learner\n\t\t</label>\n\t</div>-->\n{#if versionChoice === \"results\"}\n\t<ResultsUMAP />\n\t<Results />\n{:else}\n\t<div id=\"main\">\n\t\t{#await promise}\n\t\t\t<p>...loading</p>\n\t\t{:then dataset}\n\t\t\t{#if start && participantOrder[participant - 1] === \"constraintSolver\"}\n\t\t\t\t<VersionConstraintSolver\n\t\t\t\t\tdataset = {dataset[\"dataset\"]}\n\t\t\t\t\ttypes = {dataset[\"types\"]}\n\t\t\t\t\t{selectedAttributes}\n\t\t\t\t\t{participant}\n\t\t\t\t\t{allParticipantInfo}/>\n\t\t\t{:else if start && participantOrder[participant - 1] === \"constraintLearner\"}\n\t\t\t\t<!-- <AttributesBar\n\t\t\t\t\ton:attributeClicked={updateAttributes}\n\t\t\t\t\tdataset={dataset[\"dataset\"]}/> -->\n\t\t\t\t<VersionRecommendations\n\t\t\t\t\tdataset = {dataset[\"dataset\"]}\n\t\t\t\t\ttypes = {dataset[\"types\"]}\n\t\t\t\t\t{selectedAttributes}\n\t\t\t\t\t{participant}\n\t\t\t\t\t{allParticipantInfo}/>\n\t\t\t{:else if start && participantOrder[participant - 1] === \"granularLearner\"}\n\t\t\t\t<VersionGranularRecommendations\n\t\t\t\t\tdataset = {dataset[\"dataset\"]}\n\t\t\t\t\ttypes = {dataset[\"types\"]}\n\t\t\t\t\t{selectedAttributes}\n\t\t\t\t\t{participant}\n\t\t\t\t\t{allParticipantInfo}/>\n\t\t\t{:else}\n\t\t\t\t<div id=\"chooseVersion\">\n\t\t\t\t\t<div id=\"demographics\">\n\t\t\t\t\t\t<div id=\"participantID\">\n\t\t\t\t\t\t\tParticipant ID:\n\t\t\t\t\t\t\t<input class=\"inputBox\" bind:value={participant}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"participantGender\">\n\t\t\t\t\t\t\t<p class=\"inputContent\">Please select your gender:</p>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={gender} value={\"F\"}>\n\t\t\t\t\t\t\t\tFemale\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={gender} value={\"M\"}>\n\t\t\t\t\t\t\t\tMale\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={gender} value={\"other\"}>\n\t\t\t\t\t\t\t\tOther\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={gender} value={\"none\"}>\n\t\t\t\t\t\t\t\tPrefer not to say\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"participantAge\">\n\t\t\t\t\t\t\t<p class=\"inputContent\">Please select your age range:</p>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\"18-19\"}>\n\t\t\t\t\t\t\t\t18 to 19 (inclusive)\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\"20-24\"}>\n\t\t\t\t\t\t\t\t20 to 24 (inclusive)\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\"25-29\"}>\n\t\t\t\t\t\t\t\t25 to 29 (inclusive)\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\"30-34\"}>\n\t\t\t\t\t\t\t\t30 to 34 (inclusive)\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\">=35\"}>\n\t\t\t\t\t\t\t\t35 or greater\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={ageRange} value={\"none\"}>\n\t\t\t\t\t\t\t\tPrefer not to say\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"participantTools\">\n\t\t\t\t\t\t\t<p class=\"inputContent\">Please list the visualization tools you have used in the last 30 days (comma separated):</p>\n\t\t\t\t\t\t\t<input id=\"toolsInput\" class=\"inputBox\" bind:value={tools}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"participantExperience\">\n\t\t\t\t\t\t\t<p class=\"inputContent\">In the last 30 days how often have used any of these visualization tools?</p>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={experience} value={\"0\"}>\n\t\t\t\t\t\t\t\tNever\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={experience} value={\"1-2\"}>\n\t\t\t\t\t\t\t\t1-2 times\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={experience} value={\"3-5\"}>\n\t\t\t\t\t\t\t\t3-5 times\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={experience} value={\"5-10\"}>\n\t\t\t\t\t\t\t\t5-10 times\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label class=\"inputBox\">\n\t\t\t\t\t\t\t\t<input type=radio bind:group={experience} value={\">10\"}>\n\t\t\t\t\t\t\t\tMore than 10 times\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- <label class=\"versionOption\">\n\t\t\t\t\t\t\t<input type=radio bind:group={version} value={\"constraintSolver\"}>\n\t\t\t\t\t\t\tConstraint Solver\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label class=\"versionOption\">\n\t\t\t\t\t\t\t<input type=radio bind:group={version} value={\"constraintLearner\"}>\n\t\t\t\t\t\t\tConstraint Learner\n\t\t\t\t\t\t</label> -->\n\t\t\t\t\t\t<button id=\"beginButton\" on:click={load}>BEGIN</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{:catch error}\n\t\t\t<p style=\"color: red\">{error.message}</p>\n\t\t{/await}\n\t</div>\n{/if}\n</div>\n\n<style>\n\t#main {\n\t\tdisplay: flex;\n\t\tflex-direction: row\n\t}\n\n\t#chooseVersion {\n\t\twidth: 100vw;\n\t\tpadding: 150px 0px 150px 0px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\toverflow: scroll\n\t}\n\n\t#demographics {}\n\n\t#versioning {\n\t\tdisplay: flex;\n\t\tpadding: 10px 0px 20px 20px;\n\t}\n\n\t#toolsInput {\n\t\twidth: 100%;\n\t}\n\n\t.versionOption {\n\t\tmargin-right: 20px;\n\t}\n\n\t.inputBox {\n\t\tmargin-bottom: 10px\n\t}\n\n\t.inputContent {\n\t\tmargin-top: 25px;\n\t\tmargin-bottom: 10px\n\t}\n\n\t#beginButton {\n\t\tmargin-top: 25px;\n\t}\n</style>",
    "<script>\n\timport { createEventDispatcher } from 'svelte'\n\n\texport let dataset = []\n\n\t// let selectedAttributes = []\n\n\tlet attributes = Object.keys(dataset[0])\n\n\tconst dispatch = createEventDispatcher()\n\n\tfunction update(a) {\n\t\t// selectedAttributes = selectedAttributes.push(a)\n\t\tlet element = document.getElementById(a)\n\t\telement.style.backgroundColor = \"#a3ccb7\"\n\t\tdispatch('attributeClicked', {\n\t\t\tattribute: a,\n\t\t});\n\t}\n</script>\n\n<div id=\"attributesBar\">\n\t<p><b>ATTRIBUTES</b></p>\n\t{#each attributes as a}\n\t\t<button\n\t\t\tid={a}\n\t\t\ton:click={() => update(a)}>{a}</button>\n\t{/each}\n</div>\n\n<style>\n\t#attributesBar {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 150px;\n\t\tmargin-right: 50px;\n\t\tbackground: white;\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport { dndzone, TRIGGERS, SHADOW_ITEM_MARKER_PROPERTY_NAME } from \"svelte-dnd-action\"\n\timport { flip } from 'svelte/animate'\n\timport Constraint from './Constraint.svelte'\n\timport DataFields from './DataFields.svelte'\n\n\texport let selectedMark\n\texport let channelSelections\n\texport let updateCount\n\n\tlet shouldIgnoreDndEvents = false;\n\tlet dropFromOthersDisabled = true\n\n\tlet marks = ['', 'area','bar','point', 'line','rect','tick']\n\n\tlet channels = ['x','y','color','size','shape']\n\n\tlet wildcards = [{id:\"quantitative\", name:\"quantitative\"},\n\t\t\t\t  \t{id:\"nominal\", name:\"categorical\"}]\n\n\t// let variable_types = {'name': 'number', 'mfr': 'string', 'type': 'string', 'calories': 'number', 'protein': 'number', 'fat': 'number', 'sodium': 'number', 'fiber': 'number', 'carbo': 'number', 'sugars': 'number', 'potass': 'number', 'vitamins': 'number', 'shelf': 'number', 'weight': 'number', 'cups': 'number', 'rating': 'number'}\n\n\n\t// let variable_types = {'title': 'string', 'startYear': 'number', 'runtimeMinutes': 'number', 'averageRating': 'number', 'numVotes': 'number'}\n\n\tlet dataOptions = [{id:\"type\", name:\"type\", aggregate:\"-\"},\n\t\t\t\t  {id:\"minutes\", name:\"minutes\", aggregate:\"-\"},\n\t\t\t\t  {id:\"rating\", name:\"rating\", aggregate:\"-\"},\n\t\t\t\t  {id:\"votes\", name:\"votes\", aggregate:\"-\"},\n\t\t\t\t  {id:\"principals\", name:\"principals\", aggregate:\"-\"},\n\t\t\t\t  {id:\"genre\", name:\"genre\", aggregate:\"-\"}]\n\n\t// let variables = [''].concat(accepted_types).concat(Object.keys(variable_types).map(v => 'field_' + v))\n\n\tconst flipDurationMs = 200\n\n\tfunction handleConsider(e) {\n        console.warn(`got consider ${JSON.stringify(e.detail, null, 2)}`);\n        const {trigger, id} = e.detail.info;\n        if (trigger === TRIGGERS.DRAG_STARTED) {\n            console.warn(`copying ${id}`);\n            const idx = items.findIndex(item => item.id === id);\n            const newId = `${id}_copy_${Math.round(Math.random()*100000)}`;\n\t\t\t\t\t\t// the line below was added in order to be compatible with version svelte-dnd-action 0.7.4 and above \n\t\t\t\t\t  e.detail.items = e.detail.items.filter(item => !item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);\n            e.detail.items.splice(idx, 0, {...items[idx], id: newId});\n            items = e.detail.items;\n            shouldIgnoreDndEvents = true;\n        }\n        else if (!shouldIgnoreDndEvents) {\n            items = e.detail.items;\n        }\n        else {\n            items = [...items];\n        }\n    }\n\n    function handleFinalize(e) {\n        items = e.detail.items;\n    }\n\n    $: if (selectedMark) {updateCount++}\n\n</script>\n\n<div id=\"attributesInfo\">\n\t<div id=\"attributesList\">\n\t\t<p><b>DATA</b></p>\n\t\t<div id=\"datasetName\">\n\t\t\t<i class=\"material-icons md-24\" id=\"listIcon\">view_list</i>\n\t\t\t<p> movies90s.csv</p>\n\t\t</div>\n\t\t<p>Fields</p>\n\t\t<DataFields items={dataOptions} />\n\t\t<p>Wildcards</p>\n\t\t<DataFields items={wildcards} />\n\t</div>\n\t<div id=\"attributesConstraints\">\n\t\t<p><b>ENCODINGS</b></p>\n\t\t<p>Mark</p>\n\t\t<div class=\"attribute\">\n\t\t\t<div class=\"attributeLeft\">mark</div>\n\t\t\t<select id=\"mark-dropdown\"\n\t\t\t\tclass=\"attributeRight\"\n\t\t\t\tbind:value={selectedMark}>\n\t\t\t\t{#each marks as m}\n\t\t\t\t\t<option value={m}>{m}</option>\n\t\t\t\t{/each}\n\t\t\t</select>\n\t\t</div>\n\t\t<p>Encoding</p>\n\t\t\n\t\t{#each channels as c}\n\t\t\t<Constraint attributeType={c} bind:items={channelSelections[c]} bind:updateCount={updateCount} />\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t#datasetName {\n\t\tdisplay: flex;\n\t\tfont-size: 11px;\n\t\talign-items: center;\n\t}\n\n\t#listIcon {\n\t\tfont-size: 16px;\n\t\tmargin-right: 2px;\n\t}\n\n\t#attributesInfo {\n\t\tdisplay: flex;\n\t}\n\n\t#attributesConstraints {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 200px;\n\t\tpadding: 20px 20px 0px 0px;\n\t    margin-right: 25px;\n\t\tbackground: #f3f3f3;\n\t\tborder-right: 2px solid white;\n\t}\n\n\t#attributesList {\n\t\tdisplay: flex;\n\t\theight: 100%;\n\t\tflex-direction: column;\n\t    padding: 20px 20px 0px 15px;\n\t    margin-right: 25px;\n\t\tbackground: white;\n\t}\n\n\t.attribute {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 0px 10px;\n\t}\n\n\t#mark-dropdown {\n\t\theight: 25px;\n\t\twidth: 200px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 10px 0px 5px;\n\t}\n</style>",
    "<script>\n\timport Vectorspace from './Vectorspace.svelte'\n\timport * as d3 from \"d3\"\n\n\texport let attributes = []\n\texport let allPoints = []\n\texport let shownPoints = []\n\n\tlet attributesProcessed = []\n\n\tlet markAttr = []\n\tlet encodingAttr = []\n\n\t// The following descriptions are provided by IMDB\n\t// https://www.imdb.com/interfaces/\n\t// principals and genre have been modified from the original dataset\n\t// Their descriptions reflect the modifications\n\tlet descriptions = {\"type\":{type: \"categorical\", des:\"the type/format of the title (e.g. movie, short, tvseries, tvepisode, video, etc)\"},\n\t\t\t\t\t\t\"minutes\":{type: \"quantitative\", des:\"primary runtime of the title, in minutes\"},\n\t\t\t\t\t\t\"rating\":{type: \"quantitative\", des:\"weighted average of all the individual user ratings\"},\n\t\t\t\t\t\t\"votes\":{type: \"quantitative\", des:\"number of votes the title has received\"},\n\t\t\t\t\t\t\"principals\":{type: \"quantitative\", des:\"total principal cast/crew for titles\"},\n\t\t\t\t\t\t\"genre\":{type: \"categorical\", des:\"first genre associated with the title\"},\n\t\t\t\t\t\t\"categorical\":{type: \"any\", des:\"type, genre\"},\n\t\t\t\t\t\t\"quantitative\":{type: \"any\", des:\"minutes, rating, votes, principals\"}}\n\n\tlet attributesList = [\"type\",\"minutes\",\"rating\",\"votes\",\"principals\",\"genre\"]\n\n\t$: {\n\t\t// console.log(attributes)\n\t\tlet opacityScale = d3.scaleLinear()\n\t\t\t\t\t\t\t.domain(d3.extent(attributes.map(a => a[1])))\n\t\t\t\t\t\t\t.range([0.25, 1])\n\n\t\tlet newAttributes = []\n\t\tlet newMarkAttr = []\n\t\tlet newEncodingAttr = []\n\n\t\tfor (let a of attributes) {\n\t\t\tlet feature = a[0]\n\n\t\t\tlet name\n\t\t\tlet value\n\t\t\tlet opacity\n\n\t\t\tif (feature.indexOf(\"mark\") > -1) {\n\t\t\t\tname = \"mark\"\n\t\t\t\tvalue = feature.slice(feature.indexOf(\"_\") + 1)\n\n\t\t\t\topacity = opacityScale(a[1])\n\n\t\t\t\tnewMarkAttr.push([name, value, opacity])\n\t\t\t} else if (feature.indexOf(\"bin\") > -1) {\n\t\t\t\tname = feature.slice(0, feature.indexOf(\".\"))\n\t\t\t\tvalue = \"bin\"\n\t\t\t\topacity = opacityScale(a[1])\n\t\t\t} else {\n\t\t\t\tif (feature.endsWith(\"field\")) { continue }\n\n\t\t\t\tname = feature.slice(0, feature.indexOf(\".\"))\n\n\t\t\t\tvalue = feature.slice(feature.indexOf(\"_\") + 1, feature.length)\n\t\t\t\topacity = opacityScale(a[1])\n\n\t\t\t\tif (value === \"nominal\") {\n\t\t\t\t\tvalue = \"categorical\"\n\t\t\t\t}\n\t\t\t\tnewEncodingAttr.push([name, value, opacity])\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tnewMarkAttr = newMarkAttr.sort((a, b) => b[1] > a[1])\n\t\tnewEncodingAttr = newEncodingAttr.sort((a, b) => b[1] > a[1])\n\n\t\tmarkAttr = newMarkAttr.slice(0, 10)\n\t\tencodingAttr = newEncodingAttr.slice(0, 10)\n\t}\n\n\t// let attributes = Object.keys(dataset[0])\n</script>\n\n<div id=\"attributesInfo\">\n\t<div id=\"attributesList\">\n\t\t<p><b>DATA</b></p>\n\t\t<div id=\"datasetName\">\n\t\t\t<i class=\"material-icons md-24\" id=\"listIcon\">view_list</i>\n\t\t\t<p> movies90s.csv</p>\n\t\t</div>\n\t\t<p>Fields</p>\n\t\t{#each attributesList as l}\n\t\t\t<div key={l} class=\"dataField\">\n\t\t\t\t<div class=\"field\">{l}</div>\n\t\t\t\t\t<div class=\"tooltip\">\n\t\t\t\t\t<i class=\"material-icons md-24 dataInfo\">info</i>\n\t\t\t\t\t<span class=\"tooltiptext\">{descriptions[l].type + ': ' + descriptions[l].des}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n\t<div id=\"attributesWeights\">\n\t\t<p><b>PREFERENCES</b></p>\n\t\t<p>Mark</p>\n\t\t{#each markAttr as a}\n\t\t\t<div key={a.join()} class=\"attribute\" style={`opacity:${a[2]}`}>\n\t\t\t\t<div class=\"attributeLeft\">{a[0]}</div>\n\t\t\t\t<div class=\"attributeRight\">{a[1]}</div>\n\t\t\t</div>\n\t\t{/each}\n\t\t<p>Encoding</p>\n\t\t{#each encodingAttr as e}\n\t\t\t<div key={e.join()} class=\"attribute\" style={`opacity:${e[2]}`}>\n\t\t\t\t<div class=\"attributeLeft\">{e[0]}</div>\n\t\t\t\t<div class=\"attributeRight\">{e[1]}</div>\n\t\t\t</div>\n\t\t{/each}\n\t\t<!-- <p><b>EMBEDDINGS</b></p>\n\t\t<Vectorspace allPoints={allPoints} shownPoints={shownPoints} /> -->\n\t</div>\n</div>\n\n<style>\n\t#datasetName {\n\t\tdisplay: flex;\n\t\tfont-size: 11px;\n\t\talign-items: center;\n\t}\n\n\t#listIcon {\n\t\tfont-size: 16px;\n\t\tmargin-right: 2px;\n\t}\n\n\t#attributesInfo {\n\t\tdisplay: flex;\n\t}\n\n\t#attributesWeights {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 200px;\n\t\tpadding: 20px 20px 0px 0px;\n\t    margin-right: 25px;\n\t\tbackground: #f3f3f3;\n\t\tborder-right: 2px solid white;\n\t}\n\n\t#attributesList {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t    padding: 20px 20px 0px 15px;\n\t    margin-right: 25px;\n\t\tbackground: white;\n\t}\n\n\t.dataField {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.field {\n\t\talign-content: middle;\n\t\tborder-radius: 12px 12px 12px 12px;\n    \tborder: steelblue solid 2px;\n    \tpadding: 0px 10px 0px 10px;\n    \twidth: 100%;\n\t}\n\n\t.attribute {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 0px 10px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 10px 0px 5px;\n    \twidth: 200px;\n\t}\n\n\t.dataInfo {\n\t\topacity: 25%;\n    \tcursor: default;\n    \tmargin-left: 10px;\n    \tcursor: default;\n\t}\n\n\t.tooltip {\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t/* Tooltip text */\n\t.tooltip .tooltiptext {\n\t\tvisibility: hidden;\n\t    width: 200px;\n\t    background-color: gray;\n\t    color: white;\n\t    text-align: center;\n\t    padding: 20px;\n\t    border-radius: 6px;\n\t    position: absolute;\n\t    z-index: 1;\n\t    /* top: -2px; */\n\t    left: 120%;\n\t    opacity: 0;\n\t    transition: opacity 0.3s;\n\t    /* height: 80px; */\n\t    font-size: 12px;\n\t    opacity: 0.6;\n\t}\n\n\t/* Tooltip arrow */\n\t.tooltip .tooltiptext::after {\n\t\tcontent: \" \";\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tright: 100%; /* To the left of the tooltip */\n\t\tmargin-top: -5px;\n\t\tborder-width: 5px;\n\t\tborder-style: solid;\n\t\tborder-color: transparent gray transparent transparent;\n\t}\n\n\t/* Show the tooltip text when you mouse over the tooltip container */\n\t.tooltip:hover .tooltiptext {\n\t\tvisibility: visible;\n\t\topacity: 1;\n\t}\n</style>",
    "<script>\n\timport { dndzone, TRIGGERS, SHADOW_ITEM_MARKER_PROPERTY_NAME } from \"svelte-dnd-action\"\n\timport { flip } from 'svelte/animate'\n\n\texport let items = []\n\texport let attributeType\n\texport let updateCount\n\t// export let setValue\n\n\t$: console.log(\"items\", items)\n\n\tlet shouldIgnoreDndEvents = false;\n\tlet aggregates = [\"-\", \"bin\", \"min\", \"max\", \"mean\", \"median\", \"sum\"]\n\tlet selected = \"\"\n\n\tlet descriptions = {\"type\":\"categorical\",\n\t\t\t\t\t\t\"minutes\":\"quantitative\",\n\t\t\t\t\t\t\"rating\":\"quantitative\",\n\t\t\t\t\t\t\"votes\":\"quantitative\",\n\t\t\t\t\t\t\"principals\":\"quantitative\",\n\t\t\t\t\t\t\"genre\":\"categorical\"}\n\n\tconst flipDurationMs = 200\n\n\tfunction handleConsider(e) {\n        items = e.detail.items;\n    }\n\n    function handleFinalize(e) {\n\n    \tlet mostRecent = e.detail.info.id\n\n    \tfor (let i of e.detail.items) {\n    \t\tif (i.id == mostRecent) {\n    \t\t\titems = [i]\n    \t\t\tupdateCount++\n    \t\t\t// setValue = i.id\n    \t\t}\n    \t}\n    }\n\n    function onChange(item, a) {\n    \t// console.log('updating items...', item)\n    \t// let itemName= item.name\n\n    \titem.aggregate = a\n    \titems = [...items]\n    \tupdateCount++\n    }\n\n    function removeItem() {\n    \tif (items.length != 0) {\n    \t\titems = []\n    \t\tupdateCount++\n    \t}\n    }\n\n</script>\n\n<div class=\"attribute\">\n\t<div class=\"attributeLeft\">{attributeType}</div>\n\t<div class=\"attributeRight\"\n\t\tuse:dndzone={{items, flipDurationMs}}\n\t\ton:consider={handleConsider}\n\t\ton:finalize={handleFinalize}>\n\t\t{#each items as item(item.id)}\n\t\t\t<div>{item.name ? item.name : ''}</div>\n\t\t\t{#if descriptions[item.name] == \"quantitative\"}\n\t\t\t\t<div class=\"tooltip\">\n\t\t\t\t\t<i class=\"material-icons md-24\">expand_more</i>\n\t\t\t\t\t<div class=\"tooltipcontent\">\n\t\t\t\t\t\t{#each aggregates as a}\n\t\t\t\t\t\t\t<label class=\"aggOption\">\n\t\t\t\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t\t\t\t\tvalue={a}\n\t\t\t\t\t\t\t\t\t\tchecked={item.aggregate===a}\n\t\t\t\t\t\t\t\t\t\ton:change={() => onChange(item, a)} />\n\t\t\t\t\t\t\t\t<p class=\"aggValue\">{a}</p>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/each}\n\t</div>\n\t<i class=\"material-icons md-24 dataInfo\"\n\t\ton:click={removeItem}>delete</i>\n</div>\n\n<style>\n\t.attribute {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 0px 10px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 0px 0px 5px;\n\t    width: 200px;\n\t    display: flex;\n\t    justify-content: space-between;\n\t}\n\n\t.aggOption {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.dataInfo {\n\t\topacity: 25%;\n    \tcursor: default;\n    \tmargin-left: 10px;\n    \tcursor: pointer;\n\t}\n\n\t/* Hard coded alignment values */\n\t.aggValue {\n\t\tmargin-left: 5px;\n\t\tmargin-top: 7px;\n\t\tline-height: 0.5em;\n\t}\n\n\t.tooltip {\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t/* Tooltip text */\n\t.tooltip .tooltipcontent {\n\t\tvisibility: hidden;\n\t    width: 200px;\n\t    background-color: gray;\n\t    color: white;\n\t    padding: 20px;\n\t    border-radius: 6px;\n\t    position: absolute;\n\t    z-index: 1;\n\t    /* top: -2px; */\n\t    left: 120%;\n\t    opacity: 0;\n\t    transition: opacity 0.3s;\n\t    /* height: 80px; */\n\t    font-size: 12px;\n\t    opacity: 0.6;\n\t    display: grid;\n\t    grid-template-columns: repeat(2, auto);\n\t    grid-template-rows: repeat(4, auto);\n\t}\n\n\t/* Tooltip arrow */\n\t.tooltip .tooltipcontent::after {\n\t\tcontent: \" \";\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tright: 100%; /* To the left of the tooltip */\n\t\tmargin-top: -5px;\n\t\tborder-width: 5px;\n\t\tborder-style: solid;\n\t\tborder-color: transparent gray transparent transparent;\n\t}\n\n\t/* Show the tooltip text when you mouse over the tooltip container */\n\t.tooltip:hover .tooltipcontent {\n\t\tvisibility: visible;\n\t\topacity: 1;\n\t}\n</style>",
    "<script>\n\timport { dndzone, TRIGGERS, SHADOW_ITEM_MARKER_PROPERTY_NAME } from \"svelte-dnd-action\"\n\timport { flip } from 'svelte/animate'\n\n\texport let items = []\n\n\tlet shouldIgnoreDndEvents = false;\n\tlet dropFromOthersDisabled = true;\n\n\t// The following descriptions are provided by IMDB\n\t// https://www.imdb.com/interfaces/\n\t// principals and genre have been modified from the original dataset\n\t// Their descriptions reflect the modifications\n\tlet descriptions = {\"type\":{type: \"categorical\", des:\"the type/format of the title (e.g. movie, short, tvseries, tvepisode, video, etc)\"},\n\t\t\t\t\t\t\"minutes\":{type: \"quantitative\", des:\"primary runtime of the title, in minutes\"},\n\t\t\t\t\t\t\"rating\":{type: \"quantitative\", des:\"weighted average of all the individual user ratings\"},\n\t\t\t\t\t\t\"votes\":{type: \"quantitative\", des:\"number of votes the title has received\"},\n\t\t\t\t\t\t\"principals\":{type: \"quantitative\", des:\"total principal cast/crew for titles\"},\n\t\t\t\t\t\t\"genre\":{type: \"categorical\", des:\"first genre associated with the title\"},\n\t\t\t\t\t\t\"categorical\":{type: \"any\", des:\"type, genre\"},\n\t\t\t\t\t\t\"quantitative\":{type: \"any\", des:\"minutes, rating, votes, principals\"}}\n\n\tconst flipDurationMs = 200\n\n\tfunction handleConsider(e) {\n        console.warn(`got consider ${JSON.stringify(e.detail, null, 2)}`);\n        const {trigger, id} = e.detail.info;\n        if (trigger === TRIGGERS.DRAG_STARTED) {\n            console.warn(`copying ${id}`);\n            const idx = items.findIndex(item => item.id === id);\n            const newId = `${id}_copy_${Math.round(Math.random()*100000)}`;\n\t\t\t\t\t\t// the line below was added in order to be compatible with version svelte-dnd-action 0.7.4 and above \n\t\t\t\t\t  e.detail.items = e.detail.items.filter(item => !item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);\n            e.detail.items.splice(idx, 0, {...items[idx], id: newId});\n            items = e.detail.items;\n            shouldIgnoreDndEvents = true;\n        }\n        else if (!shouldIgnoreDndEvents) {\n            items = e.detail.items;\n        }\n        else {\n            items = [...items];\n        }\n    }\n\n    function handleFinalize(e) {\n        items = e.detail.items;\n    }\n\n</script>\n\n\n<div use:dndzone={{items, flipDurationMs, dropFromOthersDisabled}}\n\ton:consider={handleConsider}\n\ton:finalize={handleFinalize}>\n\t{#each items as item(item.id)}\n\t\t<div key={item.name} class=\"dataField\" animate:flip={{duration:flipDurationMs}}>\n\t\t\t<div class=\"field\">{item.name}</div>\n\t\t\t<div class=\"tooltip\">\n\t\t\t\t<i class=\"material-icons md-24 dataInfo\">info</i>\n\t\t\t\t<span class=\"tooltiptext\">{descriptions[item.name].type + ': ' + descriptions[item.name].des}</span>\n\t\t\t</div>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t.dataField {\n\t\theight: 25px;\n\t\tmargin-bottom: 10px;\n\t\tdisplay: flex;\n\t\tcursor: move;\n\t}\n\n\t.field {\n\t\talign-content: middle;\n\t\tborder-radius: 12px 12px 12px 12px;\n    \tborder: steelblue solid 2px;\n    \tpadding: 0px 10px 0px 10px;\n    \twidth: 100%;\n\t}\n\n\t.dataInfo {\n\t\topacity: 25%;\n    \tcursor: default;\n    \tmargin-left: 10px;\n    \tcursor: default;\n\t}\n\n\t.tooltip {\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t/* Tooltip text */\n\t.tooltip .tooltiptext {\n\t\tvisibility: hidden;\n\t    width: 200px;\n\t    background-color: gray;\n\t    color: white;\n\t    text-align: center;\n\t    padding: 20px;\n\t    border-radius: 6px;\n\t    position: absolute;\n\t    z-index: 1;\n\t    /* top: -2px; */\n\t    left: 120%;\n\t    opacity: 0;\n\t    transition: opacity 0.3s;\n\t    /* height: 80px; */\n\t    font-size: 12px;\n\t    opacity: 0.6;\n\t}\n\n\t/* Tooltip arrow */\n\t.tooltip .tooltiptext::after {\n\t\tcontent: \" \";\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tright: 100%; /* To the left of the tooltip */\n\t\tmargin-top: -5px;\n\t\tborder-width: 5px;\n\t\tborder-style: solid;\n\t\tborder-color: transparent gray transparent transparent;\n\t}\n\n\t/* Show the tooltip text when you mouse over the tooltip container */\n\t.tooltip:hover .tooltiptext {\n\t\tvisibility: visible;\n\t\topacity: 1;\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\timport vegaToRanking from './vegaToRanking.js'\n\timport defaultConstraints from './defaults.js'\n\n\timport getRecombinations from './getRecombinations.js'\n\n\timport AttributesWeight from './AttributesWeight.svelte'\n\timport ToggleSelect from './ToggleSelect.svelte'\n\n\texport let participant = -1\n\texport let allParticipantInfo = {}\n\n\texport let vegaSpecsOriginal = []\n\texport let dataset = []\n\texport let selectedAttributes = []\n\texport let recommendationCount = 4\n\n\tlet vegaSpecs\n\n\t$: vegaSpecs = JSON.parse(JSON.stringify(vegaSpecsOriginal))\n\n\t// true if updating recommendations from server\n\tlet loading = false\n\t\n\tlet updateCount = 0\n\n\t// Track of user preferences\n\tlet moreLikeThis = []\n\tlet lessLikeThis = []\n\tlet maybeLikeThis = []\n\n\t// Current recommendations\n\tlet recommendations = []\n\t// Recommendations generated from the same draco query\n\tlet similarRecommendations = []\n\t// Recommendations class\n\tlet recommendationsClass = Array(recommendationCount).fill(\"default\")\n\n\tlet recommendationFeedbackMore = Array(recommendationCount).fill(new Array())\n\tlet recommendationFeedbackLess = Array(recommendationCount).fill(new Array())\n\n\tlet classifierResult\n\n\tlet pinned = []\n\tlet currentPinned = []\n\n\tlet attributesWeight = []\n\n\tlet visVectors = []\n\n\tlet allPoints = []\n\tlet shownPoints = []\n\n\tlet sessionData = []\n\n\t$: visVectors = vegaSpecs\n\n\tfunction getDiff(allSpecs, spec2) {\n\t\tfor (let i of allSpecs) {\n\t\t\tif (JSON.stringify(i) == JSON.stringify(spec2)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t\t\n\t}\n\n\tfunction getRandom(count, choices) {\n\t\tif (choices.length < count) {\n\t\t\treturn choices\n\t\t}\n\n\t\tlet numChoices = choices.length\n\t\tlet chosen = new Set()\n\t\tlet result = []\n\t\twhile (result.length < count) {\n\t\t\tlet randomIndex = Math.floor(Math.random() * Math.floor(numChoices))\n\n\t\t\tlet spec2 = choices[randomIndex]\n\n\t\t\tif (result.length == 0) {\n\t\t\t\tresult.push(spec2)\n\t\t\t} else {\n\t\t\t\tif (getDiff(result, spec2)) {\n\t\t\t\t\tresult.push(spec2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// let result = []\n\t\t// for (let i of Array.from(chosen)) {\n\t\t// \tresult.push(choices[i])\n\t\t// }\n\n\t\t// console.log(\"result\", result)\n\n\t\t// console.log(result)\n\n\t\treturn result\n\t}\n\n\tfunction selectRecommendations(recommendationSets) {\n\t\tsimilarRecommendations = recommendationSets\n\n\t\tlet result = []\n\t\tlet resultUid = new Set()\n\t\tlet setNumber = 0\n\n\t\twhile (result.length < 4) {\n\n\t\t\tlet set = similarRecommendations[setNumber % 4]\n\n\t\t\tif (set.length == 0) {\n\t\t\t\tsetNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet selectedUid\n\t\t\tlet selected\n\n\t\t\twhile (!selectedUid || resultUid.has(selectedUid)) {\n\t\t\t\tlet randomIndex = Math.floor(Math.random() * (set.length))\n\t\t\t\tselected = set[randomIndex]\n\t\t\t\tselectedUid = selected.uid\n\t\t\t}\n\n\t\t\tresult.push(selected)\n\t\t\tresultUid.add(selected.uid)\n\n\t\t\tsetNumber++\n\n\t\t}\n\n\t\t// console.log(resultUid)\n\n\t\trecommendationFeedbackMore = recommendationFeedbackMore.map(r => new Array())\n\t\trecommendationFeedbackLess = recommendationFeedbackLess.map(r => new Array())\n\t\trecommendations = result\n\n\t\tsessionData.push({\"constraints\":attributesWeight,\n\t\t\t\t\t\t  \"recommendations\": recommendations,\n\t\t\t\t\t\t  \"date\": new Date(),\n\t\t\t\t\t\t  \"label\": \"recommendations\"})\n\n\t\tloading = false\n\t}\n\n\tfunction selectFromWeighted(newVectors) {\n\t\t// let preferred = result[\"pred\"]\n\t\tlet updatedLikes = []\n\t\tlet updatedMaybe = []\n\t\tlet updatedNo = []\n\n\t\tfor (let i = 0; i < newVectors.length; i++) {\n\t\t\tlet current = newVectors[i].spec\n\t\t\tif (current.label > 0.2) {\n\t\t\t\tupdatedLikes.push(newVectors[i])\n\t\t\t} else if (current.label < -0.2) {\n\t\t\t\tupdatedNo.push(newVectors[i])\n\t\t\t} else {\n\t\t\t\tupdatedMaybe.push(newVectors[i])\n\t\t\t}\n\t\t}\n\n\t\t// console.log(updatedLikes)\n\n\t\t// console.log(updatedLikes.length, updatedMaybe.length, updatedNo.length)\n\n\t\tlet updatedPreferrences\n\n\t\t// If no likes, select 4 from either the maybes or nos\n\t\tif (updatedLikes.length < 2) {\n\t\t\tif (updatedMaybe.length < recommendationCount) {\n\t\t\t\tupdatedPreferrences = getRandom(4, updatedNo)\n\t\t\t} else {\n\t\t\t\tupdatedPreferrences = getRandom(4, updatedMaybe)\n\t\t\t}\n\t\t// If maybes and nos are less than 2 each, select all 4 from likes\n\t\t} else if (updatedMaybe.length < 2 && updatedNo.length < 2) {\n\t\t\tupdatedPreferrences = getRandom(4, updatedLikes)\n\t\t// If at least 2 likes, 2 maybes, and 2 nos, select 2 likes and either maybes or nos\n\t\t} else {\n\t\t\t// Introduce some randomness by including parts of the vectorspace\n\t\t\t// Not yet explored\n\t\t\tlet random\n\t\t\tif (updatedMaybe.length < 2) {\n\t\t\t\trandom = getRandom(2, updatedNo)\n\t\t\t} else {\n\t\t\t\trandom = getRandom(2, updatedMaybe)\n\t\t\t}\n\t\t\tlet randomYes = getRandom(2, updatedLikes)\n\t\t\tupdatedPreferrences = randomYes.concat(random)\n\t\t}\n\n\t\t// exportJSON()\n\n\t\treturn updatedPreferrences\n\t}\n\n\tfunction pruneSpec(f, r) {\n\t\tlet copy = JSON.parse(JSON.stringify(r))\n\n\t\tlet features = f.map(d => d[0])\n\n\t\t// console.log(\"features\", features, features.indexOf(\"mark\"))\n\n\t\tif (features.indexOf(\"mark\") === -1) {\n\t\t\tdelete r[\"vega\"][\"mark\"]\n\t\t}\n\n\t\tfor (let e of Object.keys(r[\"vega\"][\"encoding\"])) {\n\t\t\t// exclude if encoding is outside scope of this prototype\n\t\t\tif ([\"x\", \"y\", \"color\", \"size\", \"shape\"].indexOf(e) === -1) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// get encoding field\n\t\t\tif (features.indexOf(e+\"_field\") === -1) {\n\t\t\t\tdelete r[\"vega\"][\"encoding\"][e][\"field\"]\n\t\t\t}\n\n\t\t\t// check if binning is used\n\t\t\tif (features.indexOf(e+\"_bin\") === -1) {\n\t\t\t\tdelete r[\"vega\"][\"encoding\"][e][\"bin\"]\n\t\t\t}\n\n\t\t\t// check if aggregates are used\n\t\t\tif (features.indexOf(e+\"_aggregate\") === -1) {\n\t\t\t\tdelete r[\"vega\"][\"encoding\"][e][\"aggregate\"]\n\t\t\t}\n\n\t\t\t// check if quantitative or qualitative\n\t\t\tif (features.indexOf(e+\"_type\") === -1) {\n\t\t\t\tdelete r[\"vega\"][\"encoding\"][e][\"type\"]\n\t\t\t}\n\t\t}\n\n\t\treturn r\n\t}\n\n\tfunction runClassifier() {\n\t\tloading = true\n\n\t\tlet testingData = visVectors.map(v => v.spec)\n\t\tlet trainingData = []\n\n\t\tlet moreLikeThis = []\n\t\tlet lessLikeThis = []\n\t\tlet maybeLikeThis = []\n\n\t\tlet date = new Date()\n\n\t\tfor (let i = 0; i < recommendationFeedbackMore.length; i++) {\n\t\t\tlet f = recommendationFeedbackMore[i]\n\t\t\tif (f.length === 0) { continue }\n\n\t\t\tlet moreS = similarRecommendations[i].map((r) => pruneSpec(f, r))\n\n\t\t\t// console.log(moreS)\n\n\t\t\tmoreLikeThis = moreLikeThis.concat(moreS)\n\t\t}\n\n\t\tfor (let i = 0; i < recommendationFeedbackLess.length; i++) {\n\t\t\tlet f = recommendationFeedbackLess[i]\n\t\t\tif (f.length === 0) { continue }\n\n\t\t\tlet lessS = pruneSpec(f, recommendations[i])\n\n\t\t\tlessLikeThis = lessLikeThis.concat(lessS)\n\t\t}\n\t\t\t// sessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"more\", \"date\": date})\n\t\t\t// if (r === 'more') {\n\t\t\t// \tmoreLikeThis = moreLikeThis.concat(similarRecommendations[i])\n\t\t\t\t\n\t\t\t// \t// maybeLikeThis = maybeLikeThis.concat(similarRecommendations[i])\n\t\t\t// } else if (r === 'less') {\n\t\t\t// \tlessLikeThis.push(recommendations[i])\n\t\t\t// \tsessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"less\", \"date\": date})\n\t\t\t// } else {\n\t\t\t// \t// maybeLikeThis.push(recommendations[i])\n\t\t\t// \tsessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"none\", \"date\": date})\n\t\t\t// }\n\t\t\n\n\t\t// If no user feedback provided\n\t\tif (moreLikeThis.length === 0 && lessLikeThis.length  === 0) {\n\t\t\tlet updatedPreferrences = selectFromWeighted(visVectors)\n\n\t\t\tPromise.all(getRecombinations(updatedPreferrences, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// moreLikeThis = moreLikeThis.concat(newMore)\n\t\t// lessLikeThis = lessLikeThis.concat(newLess)\n\t\t// maybeLikeThis = maybeLikeThis.concat(newMaybe)\n\n\t\tfor (let m of moreLikeThis) {\n\t\t\tlet newM = m.vega.encoding\n\t\t\tnewM.label = 1\n\t\t\tif (m.vega.mark) {\n\t\t\t\tnewM['mark_'+m.vega.mark] = 1\n\t\t\t}\n\t\t\ttrainingData.push(newM)\n\t\t}\n\t\tfor (let l of lessLikeThis) {\n\t\t\tlet newL = l.vega.encoding\n\t\t\tnewL.label = -1\n\t\t\tif (l.vega.mark) {\n\t\t\t\tnewL['mark_'+l.vega.mark] = 1\n\t\t\t}\n\t\t\t// newL['mark_'+l.vega.mark] = 1\n\t\t\ttrainingData.push(newL)\n\t\t}\n\n\t\t// console.log(trainingData)\n\t\t// for (let mb of maybeLikeThis) {\n\t\t// \tlet newMb = mb.vega.encoding\n\t\t// \tnewMb.label = 0\n\t\t// \tnewMb['mark_'+mb.vega.mark] = 1\n\t\t// \ttrainingData.push(newMb)\n\t\t// }\n\n\t\t// for (let set of similarRecommendations) {\n\t\t// \tfor (let s of set) {\n\t\t// \t\tlet newS = s.vega.encoding\n\t\t// \t\tnewS.label = 0\n\t\t// \t\tnewS['mark'] = s.vega.mark\n\t\t// \t\ttrainingData.push(newS)\n\t\t// \t}\n\t\t// }\n\n\t\t// console.log(testingData.length)\n\n\t\tlet classifierData = {\n\t\t\t'training': trainingData,\n\t\t\t'testing': testingData\n\t\t}\n\n\t\tfetch(`./kneighbors`, {method:\"POST\", body:JSON.stringify(classifierData)})\n\t\t\t.then(d => d.text())\n      \t\t.then(d => {\n      \t\t\t// console.log(d)\n      \t\t\tlet result = JSON.parse(d)\n\n      \t\t\t// console.log(\"result\", result)\n      \t\t\tlet newPrediction = result[\"predictions\"]\n      \t\t\tlet newDataset = result[\"newData\"].map((d, i) => {d.label = newPrediction[i]; return d})\n      \t\t\tlet newVectors = []\n\n      \t\t\t// console.log(newDataset.length, newDataset,)\n\n      \t\t\tfor (let d of newDataset) {\n      \t\t\t\tlet s = d\n\n\t\t\t\t\tdelete s.index\n\n\t\t\t\t\tnewVectors.push({ 'spec':s })\n      \t\t\t}\n\n      \t\t\t// We keep only the most recent 200 ranked visualizations\n      \t\t\t// In addition to the original 50\n      \t\t\tif (newVectors.length > 250) {\n      \t\t\t\tlet difference = newVectors.length - 250\n      \t\t\t\tlet originals = newVectors.slice(0, 50)\n      \t\t\t\tlet added = newVectors.slice(51)\n      \t\t\t\tnewVectors = originals.concat(added.slice(difference, added.length))\n      \t\t\t}\n\n      \t\t\t// console.log(vegaSpecs.length, visVectors.length)\n\n      \t\t\tvisVectors = newVectors\n\n      \t\t\tlet updatedPreferrences = selectFromWeighted(newVectors)\n\n\t\t\t\tallPoints = newDataset\n\t\t\t\tshownPoints = updatedPreferrences\n\n\t\t\t\tlet attributes = Object.keys(newDataset[0])\n\t\t\t\tlet attributeMeans = []\n\n\t\t\t\tfor (let a of attributes) {\n\t\t\t\t\tif (a.indexOf(\"label\") > -1 || a.indexOf(\"umapX\") > -1 || a.indexOf(\"umapY\") > -1) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tlet attributeValues = newDataset.map(d => {\n\t\t\t\t\t\tif (d[a] == 1) {\n\t\t\t\t\t\t\treturn d.label\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t})\n\t\t\t\t\tattributeMeans.push([a, d3.mean(attributeValues)])\n\t\t\t\t}\n\n\t\t\t\tattributesWeight = attributeMeans.filter(d => d[1] > 0)\n\t\t\t\t// sessionData.push({\"specs\": attributesWeight, \"label\": \"constraints\"})\n\n\t\t\t\t// console.log(\"attribute weights\", attributesWeight)\n\n\t\t\t\t// console.log(updatedPreferrences)\n\n\t\t\t\tPromise.all(getRecombinations(updatedPreferrences, dataset)).then((result) => {\n\t\t\t\t\tselectRecommendations(result)\n\t\t\t\t})\n      \t\t})\n\t}\n\n\t$: {console.log('update count', updateCount)\n\t\tif (updateCount === 0) {\n\t\t\tPromise.all(getRecombinations(vegaSpecs, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('running classifier: ', updateCount)\n\t\t\trunClassifier()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'], {actions:false})\n\t}\n\n\tfunction features(spec) {\n\t\tlet mark = spec[\"vega\"][\"mark\"]\n\t\tlet features = []\n\t\t// features.push([\"mark\", mark])\n\t\tfor (let e of Object.keys(spec[\"vega\"][\"encoding\"])) {\n\n\t\t\t// exclude if encoding is outside scope of this prototype\n\t\t\tif ([\"x\", \"y\", \"color\", \"size\", \"shape\"].indexOf(e) === -1) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// get encoding field\n\t\t\tif (spec[\"vega\"][\"encoding\"][e][\"field\"]) {\n\t\t\t\tfeatures.push([e+\"_field\", spec[\"vega\"][\"encoding\"][e][\"field\"]])\n\t\t\t}\n\n\t\t\t// check if binning is used\n\t\t\tif (spec[\"vega\"][\"encoding\"][e][\"bin\"]) {\n\t\t\t\tfeatures.push([e+\"_bin\", spec[\"vega\"][\"encoding\"][e][\"bin\"]])\n\t\t\t}\n\n\t\t\t// check if aggregates are used\n\t\t\tif (spec[\"vega\"][\"encoding\"][e][\"aggregate\"]) {\n\t\t\t\tfeatures.push([e+\"_aggregate\", spec[\"vega\"][\"encoding\"][e][\"aggregate\"]])\n\t\t\t}\n\n\t\t\t// check if quantitative or qualitative\n\t\t\tif (spec[\"vega\"][\"encoding\"][e][\"type\"]) {\n\t\t\t\tfeatures.push([e+\"_type\", spec[\"vega\"][\"encoding\"][e][\"type\"]])\n\t\t\t}\n\t\t}\n\n\t\tfeatures.sort(function (a, b) {\n\t\t\tif (a[0] < b[0]) { return -1 }\n\t\t\telse if (a[0] > b[0]) { return 1 }\n\t\t\treturn 0\n\t\t})\n\n\t\tfeatures = ([[\"mark\", mark]]).concat(features)\n\n\t\treturn features\n\t}\n\n\t// Update 'moreLikeThis' array\n\tfunction updateMore(i) {\n\t\tlet features = features(recommendations[i])\n\t\t// Liking items is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\t// If items already in moreLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'more') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'more'\n\t\t}\n\t}\n\n\t// Update 'lessLikeThis' array\n\tfunction updateLess(i) {\n\t\t// Disliking items is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\t// If items already in lessLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'less') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'less'\n\t\t}\n\t}\n\n\tfunction update() {\n\t\tupdateCount++\n\t}\n\n\tfunction reset() {\n\t\trecommendationFeedbackMore = recommendationFeedbackMore.map(r => new Array())\n\t\trecommendationFeedbackLess = recommendationFeedbackLess.map(r => new Array())\n\t\tmoreLikeThis = []\n\t\tlessLikeThis = []\n\t\tmaybeLikeThis = []\n\t\tattributesWeight = []\n\t\tvisVectors = JSON.parse(JSON.stringify(vegaSpecsOriginal))\n\t}\n\n\t$: for (let p = 0; p < pinned.length; p++) {\n\t\tif (!pinned[p]) {continue}\n\t\tvegaEmbed(`#pin${p}`, pinned[p]['vega'], {actions:false})\n\t}\n\n\tfunction pin(i) {\n\t\t// Pinning is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tlet selectedUid = recommendations[i].uid\n\t\tlet pinnedIndex = currentPinned.indexOf(selectedUid)\n\t\tif (pinnedIndex === -1) {\n\t\t\tcurrentPinned = [...currentPinned, selectedUid]\n\t\t\tpinned = pinned.concat([JSON.parse(JSON.stringify(recommendations[i]))])\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"vega\": JSON.parse(JSON.stringify(recommendations[i])), \"label\": \"pinned\", \"date\": date})\n\t\t} else {\n\t\t\tcurrentPinned.splice(pinnedIndex, 1)\n\t\t\tcurrentPinned = currentPinned\n\n\t\t\tlet newPinned = []\n\n\t\t\tfor (let p of pinned) {\n\t\t\t\tif (p.uid === selectedUid) {\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tnewPinned.push(p)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpinned = newPinned\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"chart\": JSON.parse(JSON.stringify(recommendations[i])), \"label\": \"unpinned\", \"date\": date})\n\t\t}\n\t}\n\n\t// This is for unpinning from the pin drawer\n\tfunction unpin(p) {\n\t\tlet selectedUid = p.uid\n\t\t// console.log(\"unpinning\")\n\n\t\tlet newPinned = []\n\n\t\t// remove deleted from all pins\n\t\tfor (let i of pinned) {\n\t\t\tif (i.uid === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewPinned.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tpinned = newPinned\n\n\t\tlet newCurrentPinned = []\n\n\t\t// remove deleted from current pins\n\t\tfor (let j of currentPinned) {\n\t\t\tif (j === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewCurrentPinned.push(j)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tcurrentPinned = newCurrentPinned\n\n\t\tlet date = new Date()\n\t\tsessionData = sessionData.concat({\"chart\": p, \"label\": \"unpinned\", \"date\": date})\n\t}\n\n\tfunction togglePin() {\n\t\t// Showing pins is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tif (document.getElementById(\"pinnedDrawer\").style.width === \"450px\") {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t\t} else {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t\t}\n\t}\n\n\t// function closePin() {\n\t// \t// Hiding pins is disabled if new recommendations are loading\n\t// \tif (loading) { return }\n\n\t// \tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t// }\n\n\tfunction exportJSON() {\n\t\t// Downloading is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tlet allData = {\"participant\": allParticipantInfo,\n\t\t\t\t\t\t\"session\": sessionData}\n\n\t\tvar filename = `sessionData_${participant}.json`\n\t\tvar element = document.createElement('a');\n\t\telement.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(allData)))\n\t\telement.setAttribute('download', filename)\n\n\t\telement.style.display = 'none'\n\t\tdocument.body.appendChild(element)\n\n\t\telement.click()\n\n\t\tdocument.body.removeChild(element)\n\n\t\tlet downloadData = {\n\t\t\t'filename': filename,\n\t\t\t'data': allData\n\t\t}\n\n\t\tfetch(`./download`, {method:\"POST\", body:JSON.stringify(downloadData)})\n\t}\n\n</script>\n\n<div id=\"overall\">\n\t<div class:showLoader=\"{loading}\"\n\t\tclass:hideLoader=\"{!loading}\"\n\t\tclass=\"loader\">\n\t\t<div class=\"spinner\"></div>\n\t</div>\n\t<AttributesWeight attributes={attributesWeight}\n\t\t\t\t\t\tallPoints={allPoints}\n\t\t\t\t\t\tshownPoints={shownPoints}/>\n\t<div id=\"recommendations\">\n\t\t<div id=\"menu\">\n\t\t\t<p class=\"title1\"><b>RECOMMENDATIONS</b></p>\n\t\t\t<div id=\"menuOptions\">\n\t\t\t\t<button on:click={update}>UPDATE RECOMMENDATIONS</button>\n\t\t\t\t<button id=\"pinnedButton\" on:click={togglePin}>PINNED</button>\n\t\t\t\t<button on:click={reset}>RESET</button>\n\t\t\t\t<button id=\"exportJSON\" on:click={exportJSON} class=\"btn\">DOWNLOAD</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"recommendationDisplay\">\n\t\t\t{#each recommendations as c, i}\n\t\t\t\t<div class=\"vis\">\n\t\t\t\t\t<div class=\"buttons\">\n\t\t\t\t\t\t<ToggleSelect\n\t\t\t\t\t\t\tkey={`zips_more_${i}`}\n\t\t\t\t\t\t\toptions={features(recommendations[i])}\n\t\t\t\t\t\t\tbind:selectedMore={recommendationFeedbackMore[i]}\n\t\t\t\t\t\t\tbind:selectedLess={recommendationFeedbackLess[i]} />\n\t\t\t\t\t\t<!-- <button class=\"{recommendationsClass[i] === 'more' ? 'more' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateMore(i)}>\n\t\t\t\t\t\t\tMore Like This\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"{recommendationsClass[i] === 'less' ? 'less' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateLess(i)}>\n\t\t\t\t\t\t\tLess Like This\n\t\t\t\t\t\t</button>-->\n\t\t\t\t\t\t<div class:isPinned=\"{recommendations[i] && currentPinned.indexOf(recommendations[i].uid) > -1}\"\n\t\t\t\t\t\t\t class=\"pinButton\"\n\t\t\t\t\t\t\t on:click={() => pin(i)}>\n\t\t\t\t\t\t\t<i class=\"material-icons-outlined md-24\">push_pin</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div id=\"pinnedDrawer\">\n\t\t<p id=\"pinnedText\"><b>PINNED</b></p>\n\t\t<!-- <a id=\"closeButton\" on:click={closePin}>&times;</a> -->\n\t\t<div id=\"pinnedDisplay\">\n\t\t\t{#each pinned as p, i}\n\t\t\t\t<button class=\"deletePin\" on:click={() => unpin(p)}>DELETE PIN</button>\n\t\t\t\t<div id=\"pin{i}\" class=\"pinned\"></div>\n\t\t\t\t<!-- <i class=\"material-icons md-24\"\n\t\t\t\t\ton:click={() => unpin(p)}>delete</i> -->\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#overall {\n\t\tdisplay: flex;\n\t\tbackground: #f3f3f3;\n\t\twidth: 100%;\n\t\toverflow: scroll;\n\t}\n\n\t#menuOptions {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t}\n\n\t#pinnedButton {\n\t\tmargin-right: auto;\n\t\tmargin-left: 5px;\n\t}\n\n\t#exportJSON {\n\t\tmargin-left: 5px;\n\t\tmargin-right: 10px\n\t}\n\n\t.showLoader {\n\t\tdisplay: flex;\n\t}\n\n\t.hideLoader {\n\t\tdisplay: none;\n\t}\n\n\t.loader {\n\t\twidth: 100vw;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\topacity: 0.2;\n\t\tbackground-color: gray;\n\t    align-items: center;\n\t    justify-content: center;\n\t}\n\n\t.spinner {\n\t\tborder: 16px solid #f3f3f3;\n\t\tborder-radius: 50%;\n\t\tborder-top: 16px solid #3498db;\n\t\twidth: 80px;\n\t\theight: 80px;\n\t\t-webkit-animation: spin 2s linear infinite; /* Safari */\n\t\tanimation: spin 2s linear infinite;\n\t}\n\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg); }\n\t\t100% { transform: rotate(360deg); }\n\t}\n\n\t#recommendations {\n\t\tpadding-top: 20px;\n\t\tmargin-bottom: 20px\n\t}\n\n\t/*#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 350px);\n\t\tgrid-template-rows: repeat(3, 350px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px;\n\t}*/\n\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(2, 480px);\n\t\tgrid-template-rows: repeat(2, 460px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px;\n\t}\n\n\t#pinnedDrawer {\n\t\theight: 100%;\n\t\twidth: 0;\n\t\tposition: fixed;\n\t\tz-index: 1001;\n\t\ttop: 0;\n\t\tright: 0;\n\t\toverflow: scroll;\n\t\ttransition: 0.5s;\n\t\tpadding-top: 20px;\n\t\tbackground: white;\n\t\tbox-shadow: 195px 8px 10px -5px rgba(0,0,0,0.2), 0px 16px 24px 2px rgba(0,0,0,0.14), 0px 6px 30px 5px rgba(0,0,0,0.12);\n\t}\n\n\t#pinnedText {\n\t\tmargin-left: 30px;\n\t}\n\n\t#pinnedDisplay {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 30px;\n\t\tmargin-left: 30px;\n\t\tmax-width: 500px;\n\t\tpadding-bottom: 30px;\n\t}\n\n\t.deletePin {\n\t\twidth: 350px;\n\t\tmargin: 25px 0px 0px 0px;\n\t}\n\n\t.pinned {\n\t\theight: 350px;\n\t\toverflow: scroll;\n\t}\n\n\t#closeButton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 25px;\n\t\tfont-size: 36px;\n\t\tmargin-left: 50px;\n\t\tcursor: pointer;\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t    padding: 15px;\n\t}\n\n\t.buttons {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.pinButton {\n\t\tmargin-left: auto;\n\t\twidth: 28px;\n    \theight: 28px;\n    \tcolor: gray;\n    \tcursor: pointer;\n    \ttransition: transform 0.5s;\n\t}\n\n\t.isPinned {\n\t\tcolor: green;\n\t    transform: rotate(45deg);\n\t    transition: transform 0.5s;\n\t}\n\n\t.more {\n\t\tbackground-color: #cde09b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.less {\n\t\tbackground-color: #e0a99b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.default {\n\t\tbackground-color: #f4f4f4;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.vegaContainer {\n\t\theight: 400px;\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\timport vegaToRanking from './vegaToRanking.js'\n\timport defaultConstraints from './defaults.js'\n\n\timport getRecombinations from './getRecombinations.js'\n\n\timport AttributesWeight from './AttributesWeight.svelte'\n\n\texport let participant = -1\n\texport let allParticipantInfo = {}\n\n\texport let vegaSpecsOriginal = []\n\texport let dataset = []\n\texport let selectedAttributes = []\n\texport let recommendationCount = 4\n\n\tlet vegaSpecs\n\n\t$: vegaSpecs = JSON.parse(JSON.stringify(vegaSpecsOriginal))\n\n\t// true if updating recommendations from server\n\tlet loading = false\n\t\n\tlet updateCount = 0\n\n\t// Track of user preferences\n\tlet moreLikeThis = []\n\tlet lessLikeThis = []\n\tlet maybeLikeThis = []\n\n\t// Current recommendations\n\tlet recommendations = []\n\t// Recommendations generated from the same draco query\n\tlet similarRecommendations = []\n\t// Recommendations class\n\tlet recommendationsClass = Array(recommendationCount).fill(\"default\")\n\n\tlet classifierResult\n\n\tlet pinned = []\n\tlet currentPinned = []\n\n\tlet attributesWeight = []\n\n\tlet visVectors = []\n\n\tlet allPoints = []\n\tlet shownPoints = []\n\n\tlet sessionData = []\n\n\t$: visVectors = vegaSpecs\n\n\tfunction getRandom(count, choices) {\n\t\tif (choices.length < count) {\n\t\t\treturn choices\n\t\t}\n\n\t\tlet numChoices = choices.length\n\t\tlet chosen = new Set()\n\t\twhile (chosen.size < count) {\n\t\t\tlet randomIndex = Math.floor(Math.random() * Math.floor(numChoices))\n\n\t\t\tchosen.add(randomIndex)\n\t\t}\n\n\t\tlet result = []\n\t\tfor (let i of Array.from(chosen)) {\n\t\t\tresult.push(choices[i])\n\t\t}\n\n\t\t// console.log(result)\n\n\t\treturn result\n\t}\n\n\tfunction selectRecommendations(recommendationSets) {\n\t\tsimilarRecommendations = recommendationSets\n\n\t\tlet result = []\n\t\tlet resultUid = new Set()\n\t\tlet setNumber = 0\n\n\t\twhile (result.length < 4) {\n\n\t\t\tlet set = similarRecommendations[setNumber % 4]\n\n\t\t\tif (set.length == 0) {\n\t\t\t\tsetNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet selectedUid\n\t\t\tlet selected\n\n\t\t\twhile (!selectedUid || resultUid.has(selectedUid)) {\n\t\t\t\tlet randomIndex = Math.floor(Math.random() * (set.length))\n\t\t\t\tselected = set[randomIndex]\n\t\t\t\tselectedUid = selected.uid\n\t\t\t}\n\n\t\t\tresult.push(selected)\n\t\t\tresultUid.add(selected.uid)\n\n\t\t\tsetNumber++\n\n\t\t}\n\n\t\t// console.log(resultUid)\n\n\t\trecommendationsClass = recommendationsClass.map(r => 'default')\n\t\trecommendations = result\n\n\t\tsessionData.push({\"constraints\":attributesWeight,\n\t\t\t\t\t\t  \"recommendations\": recommendations,\n\t\t\t\t\t\t  \"date\": new Date(),\n\t\t\t\t\t\t  \"label\": \"recommendations\"})\n\n\t\tloading = false\n\t}\n\n\tfunction selectFromWeighted(newVectors) {\n\t\t// let preferred = result[\"pred\"]\n\t\tlet updatedLikes = []\n\t\tlet updatedMaybe = []\n\t\tlet updatedNo = []\n\n\t\tfor (let i = 0; i < newVectors.length; i++) {\n\t\t\tlet current = newVectors[i].spec\n\t\t\tif (current.label > 0) {\n\t\t\t\tupdatedLikes.push(newVectors[i])\n\t\t\t} else if (current.label === 0) {\n\t\t\t\tupdatedMaybe.push(newVectors[i])\n\t\t\t} else {\n\t\t\t\tupdatedNo.push(newVectors[i])\n\t\t\t}\n\t\t}\n\n\t\t// console.log(updatedLikes.length, updatedMaybe.length, updatedNo.length)\n\n\t\tlet updatedPreferrences\n\n\t\t// If no likes, select 4 from either the maybes or nos\n\t\tif (updatedLikes.length < 2) {\n\t\t\tif (updatedMaybe.length < recommendationCount) {\n\t\t\t\tupdatedPreferrences = getRandom(4, updatedNo)\n\t\t\t} else {\n\t\t\t\tupdatedPreferrences = getRandom(4, updatedMaybe)\n\t\t\t}\n\t\t// If maybes and nos are less than 2 each, select all 4 from likes\n\t\t} else if (updatedMaybe.length < 2 && updatedNo.length < 2) {\n\t\t\tupdatedPreferrences = getRandom(4, updatedLikes)\n\t\t// If at least 2 likes, 2 maybes, and 2 nos, select 2 likes and either maybes or nos\n\t\t} else {\n\t\t\t// Introduce some randomness by including parts of the vectorspace\n\t\t\t// Not yet explored\n\t\t\tlet random\n\t\t\tif (updatedMaybe.length < 2) {\n\t\t\t\trandom = getRandom(2, updatedNo)\n\t\t\t} else {\n\t\t\t\trandom = getRandom(2, updatedMaybe)\n\t\t\t}\n\t\t\tlet randomYes = getRandom(2, updatedLikes)\n\t\t\tupdatedPreferrences = randomYes.concat(random)\n\t\t}\n\n\t\t// exportJSON()\n\n\t\treturn updatedPreferrences\n\t}\n\n\tfunction runClassifier() {\n\t\tloading = true\n\n\t\tlet testingData = visVectors.map(v => v.spec)\n\t\tlet trainingData = []\n\n\t\tlet moreLikeThis = []\n\t\tlet lessLikeThis = []\n\t\tlet maybeLikeThis = []\n\n\t\tlet date = new Date()\n\n\t\tfor (let i = 0; i < recommendationsClass.length; i++) {\n\t\t\tlet r = recommendationsClass[i]\n\t\t\tif (r === 'more') {\n\t\t\t\tmoreLikeThis = moreLikeThis.concat(similarRecommendations[i])\n\t\t\t\tsessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"more\", \"date\": date})\n\t\t\t\t// maybeLikeThis = maybeLikeThis.concat(similarRecommendations[i])\n\t\t\t} else if (r === 'less') {\n\t\t\t\tlessLikeThis.push(recommendations[i])\n\t\t\t\tsessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"less\", \"date\": date})\n\t\t\t} else {\n\t\t\t\t// maybeLikeThis.push(recommendations[i])\n\t\t\t\tsessionData = sessionData.concat({\"seen\": recommendations[i], \"label\": \"none\", \"date\": date})\n\t\t\t}\n\t\t}\n\n\t\t// If no user feedback provided\n\t\tif (moreLikeThis.length === 0 && lessLikeThis.length  === 0) {\n\t\t\tlet updatedPreferrences = selectFromWeighted(visVectors)\n\n\t\t\tPromise.all(getRecombinations(updatedPreferrences, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// moreLikeThis = moreLikeThis.concat(newMore)\n\t\t// lessLikeThis = lessLikeThis.concat(newLess)\n\t\t// maybeLikeThis = maybeLikeThis.concat(newMaybe)\n\n\t\tconsole.log(moreLikeThis[0])\n\n\t\tfor (let m of moreLikeThis) {\n\t\t\tlet newM = m.vega.encoding\n\t\t\tnewM.label = 1\n\t\t\tnewM['mark_'+m.vega.mark] = 1\n\t\t\ttrainingData.push(newM)\n\t\t}\n\t\tfor (let l of lessLikeThis) {\n\t\t\tlet newL = l.vega.encoding\n\t\t\tnewL.label = -1\n\t\t\tnewL['mark_'+l.vega.mark] = 1\n\t\t\ttrainingData.push(newL)\n\t\t}\n\t\t// for (let mb of maybeLikeThis) {\n\t\t// \tlet newMb = mb.vega.encoding\n\t\t// \tnewMb.label = 0\n\t\t// \tnewMb['mark_'+mb.vega.mark] = 1\n\t\t// \ttrainingData.push(newMb)\n\t\t// }\n\n\t\t// for (let set of similarRecommendations) {\n\t\t// \tfor (let s of set) {\n\t\t// \t\tlet newS = s.vega.encoding\n\t\t// \t\tnewS.label = 0\n\t\t// \t\tnewS['mark'] = s.vega.mark\n\t\t// \t\ttrainingData.push(newS)\n\t\t// \t}\n\t\t// }\n\n\t\t// console.log(testingData.length)\n\n\t\tlet classifierData = {\n\t\t\t'training': trainingData,\n\t\t\t'testing': testingData\n\t\t}\n\n\t\tfetch(`./kneighbors`, {method:\"POST\", body:JSON.stringify(classifierData)})\n\t\t\t.then(d => d.text())\n      \t\t.then(d => {\n      \t\t\t// console.log(d)\n      \t\t\tlet result = JSON.parse(d)\n\n      \t\t\t// console.log(\"result\", result)\n      \t\t\tlet newPrediction = result[\"predictions\"]\n      \t\t\tlet newDataset = result[\"newData\"].map((d, i) => {d.label = newPrediction[i]; return d})\n      \t\t\tlet newVectors = []\n\n      \t\t\tfor (let d of newDataset) {\n      \t\t\t\tlet s = d\n\n\t\t\t\t\tdelete s.index\n\n\t\t\t\t\tnewVectors.push({ 'spec':s })\n      \t\t\t}\n\n      \t\t\t// We keep only the most recent 200 ranked visualizations\n      \t\t\t// In addition to the original 50\n      \t\t\tif (newVectors.length > 250) {\n      \t\t\t\tlet difference = newVectors.length - 250\n      \t\t\t\tlet originals = newVectors.slice(0, 50)\n      \t\t\t\tlet added = newVectors.slice(51)\n      \t\t\t\tnewVectors = originals.concat(added.slice(difference, added.length))\n      \t\t\t}\n\n      \t\t\tconsole.log(vegaSpecs.length, visVectors.length)\n\n      \t\t\tvisVectors = newVectors\n\n      \t\t\tlet updatedPreferrences = selectFromWeighted(newVectors)\n\n\t\t\t\tallPoints = newDataset\n\t\t\t\tshownPoints = updatedPreferrences\n\n\t\t\t\tlet attributes = Object.keys(newDataset[0])\n\t\t\t\tlet attributeMeans = []\n\n\t\t\t\tfor (let a of attributes) {\n\t\t\t\t\tif (a.indexOf(\"label\") > -1 || a.indexOf(\"umapX\") > -1 || a.indexOf(\"umapY\") > -1) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tlet attributeValues = newDataset.map(d => {\n\t\t\t\t\t\tif (d[a] == 1) {\n\t\t\t\t\t\t\treturn d.label\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t})\n\t\t\t\t\tattributeMeans.push([a, d3.mean(attributeValues)])\n\t\t\t\t}\n\n\t\t\t\tattributesWeight = attributeMeans.filter(d => d[1] > 0)\n\t\t\t\t// sessionData.push({\"specs\": attributesWeight, \"label\": \"constraints\"})\n\n\t\t\t\tconsole.log(updatedPreferrences)\n\n\t\t\t\tPromise.all(getRecombinations(updatedPreferrences, dataset)).then((result) => {\n\t\t\t\t\tselectRecommendations(result)\n\t\t\t\t})\n      \t\t})\n\t}\n\n\t$: {console.log('update count', updateCount)\n\t\tif (updateCount === 0) {\n\t\t\tPromise.all(getRecombinations(vegaSpecs, dataset)).then((result) => {\n\t\t\t\tselectRecommendations(result)\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('running classifier: ', updateCount)\n\t\t\trunClassifier()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'], {actions:false})\n\t}\n\n\t// Update 'moreLikeThis' array\n\tfunction updateMore(i) {\n\t\t// Liking items is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\t// If items already in moreLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'more') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'more'\n\t\t}\n\t}\n\n\t// Update 'lessLikeThis' array\n\tfunction updateLess(i) {\n\t\t// Disliking items is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\t// If items already in lessLikeThis, remove\n\t\tlet current = recommendationsClass[i]\n\t\tif (current === 'less') {\n\t\t\trecommendationsClass[i] = 'default'\n\t\t} else {\n\t\t\trecommendationsClass[i] = 'less'\n\t\t}\n\t}\n\n\tfunction update() {\n\t\tupdateCount++\n\t}\n\n\tfunction reset() {\n\t\trecommendationsClass = recommendationsClass.map(r => 'default')\n\t\tmoreLikeThis = []\n\t\tlessLikeThis = []\n\t\tmaybeLikeThis = []\n\t\tattributesWeight = []\n\t\tvisVectors = JSON.parse(JSON.stringify(vegaSpecsOriginal))\n\t}\n\n\t$: for (let p = 0; p < pinned.length; p++) {\n\t\tif (!pinned[p]) {continue}\n\t\tvegaEmbed(`#pin${p}`, pinned[p]['vega'], {actions:false})\n\t}\n\n\tfunction pin(i) {\n\t\t// Pinning is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tlet selectedUid = recommendations[i].uid\n\t\tlet pinnedIndex = currentPinned.indexOf(selectedUid)\n\t\tif (pinnedIndex === -1) {\n\t\t\tcurrentPinned = [...currentPinned, selectedUid]\n\t\t\tpinned = pinned.concat([recommendations[i]])\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"vega\": recommendations[i], \"label\": \"pinned\", \"date\": date})\n\t\t} else {\n\t\t\tcurrentPinned.splice(pinnedIndex, 1)\n\t\t\tcurrentPinned = currentPinned\n\n\t\t\tlet newPinned = []\n\n\t\t\tfor (let p of pinned) {\n\t\t\t\tif (p.uid === selectedUid) {\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tnewPinned.push(p)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpinned = newPinned\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"chart\": recommendations[i], \"label\": \"unpinned\", \"date\": date})\n\t\t}\n\t}\n\n\t// This is for unpinning from the pin drawer\n\tfunction unpin(p) {\n\t\tlet selectedUid = p.uid\n\t\t// console.log(p)\n\n\t\tlet newPinned = []\n\n\t\t// remove deleted from all pins\n\t\tfor (let i of pinned) {\n\t\t\tif (i.uid === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewPinned.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tpinned = newPinned\n\n\t\tlet newCurrentPinned = []\n\n\t\t// remove deleted from current pins\n\t\tfor (let j of currentPinned) {\n\t\t\tif (j === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewCurrentPinned.push(j)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tcurrentPinned = newCurrentPinned\n\n\t\tlet date = new Date()\n\t\tsessionData = sessionData.concat({\"chart\": p, \"label\": \"unpinned\", \"date\": date})\n\t}\n\n\tfunction togglePin() {\n\t\t// Showing pins is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tif (document.getElementById(\"pinnedDrawer\").style.width === \"450px\") {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t\t} else {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t\t}\n\t}\n\n\t// function closePin() {\n\t// \t// Hiding pins is disabled if new recommendations are loading\n\t// \tif (loading) { return }\n\n\t// \tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t// }\n\n\tfunction exportJSON() {\n\t\t// Downloading is disabled if new recommendations are loading\n\t\tif (loading) { return }\n\n\t\tlet allData = {\"participant\": allParticipantInfo,\n\t\t\t\t\t\t\"session\": sessionData}\n\n\t\tvar filename = `sessionData_${participant}.json`\n\t\tvar element = document.createElement('a');\n\t\telement.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(allData)))\n\t\telement.setAttribute('download', filename)\n\n\t\telement.style.display = 'none'\n\t\tdocument.body.appendChild(element)\n\n\t\telement.click()\n\n\t\tdocument.body.removeChild(element)\n\n\t\tlet downloadData = {\n\t\t\t'filename': filename,\n\t\t\t'data': allData\n\t\t}\n\n\t\tfetch(`./download`, {method:\"POST\", body:JSON.stringify(downloadData)})\n\t}\n\n</script>\n\n<div id=\"overall\">\n\t<div class:showLoader=\"{loading}\"\n\t\tclass:hideLoader=\"{!loading}\"\n\t\tclass=\"loader\">\n\t\t<div class=\"spinner\"></div>\n\t</div>\n\t<AttributesWeight attributes={attributesWeight}\n\t\t\t\t\t\tallPoints={allPoints}\n\t\t\t\t\t\tshownPoints={shownPoints}/>\n\t<div id=\"recommendations\">\n\t\t<div id=\"menu\">\n\t\t\t<p class=\"title1\"><b>RECOMMENDATIONS</b></p>\n\t\t\t<div id=\"menuOptions\">\n\t\t\t\t<button on:click={update}>UPDATE RECOMMENDATIONS</button>\n\t\t\t\t<button id=\"pinnedButton\" on:click={togglePin}>PINNED</button>\n\t\t\t\t<button on:click={reset}>RESET</button>\n\t\t\t\t<button id=\"exportJSON\" on:click={exportJSON} class=\"btn\">DOWNLOAD</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"recommendationDisplay\">\n\t\t\t{#each recommendations as c, i}\n\t\t\t\t<div class=\"vis\">\n\t\t\t\t\t<div class=\"buttons\">\n\t\t\t\t\t\t<button class=\"{recommendationsClass[i] === 'more' ? 'more' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateMore(i)}>\n\t\t\t\t\t\t\tMore Like This\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"{recommendationsClass[i] === 'less' ? 'less' : 'default'}\"\n\t\t\t\t\t\t\t\ton:click={() => updateLess(i)}>\n\t\t\t\t\t\t\tLess Like This\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div class:isPinned=\"{recommendations[i] && currentPinned.indexOf(recommendations[i].uid) > -1}\"\n\t\t\t\t\t\t\t class=\"pinButton\"\n\t\t\t\t\t\t\t on:click={() => pin(i)}>\n\t\t\t\t\t\t\t<i class=\"material-icons-outlined md-24\">push_pin</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div id=\"pinnedDrawer\">\n\t\t<p id=\"pinnedText\"><b>PINNED</b></p>\n\t\t<!-- <a id=\"closeButton\" on:click={closePin}>&times;</a> -->\n\t\t<div id=\"pinnedDisplay\">\n\t\t\t{#each pinned as p, i}\n\t\t\t\t<button class=\"deletePin\" on:click={() => unpin(p)}>DELETE PIN</button>\n\t\t\t\t<div id=\"pin{i}\" class=\"pinned\"></div>\n\t\t\t\t<!-- <i class=\"material-icons md-24\"\n\t\t\t\t\ton:click={() => unpin(p)}>delete</i> -->\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#overall {\n\t\tdisplay: flex;\n\t\tbackground: #f3f3f3;\n\t\twidth: 100%;\n\t\toverflow: scroll;\n\t}\n\n\t#menuOptions {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t}\n\n\t#pinnedButton {\n\t\tmargin-right: auto;\n\t\tmargin-left: 5px;\n\t}\n\n\t#exportJSON {\n\t\tmargin-left: 5px;\n\t\tmargin-right: 10px\n\t}\n\n\t.showLoader {\n\t\tdisplay: flex;\n\t}\n\n\t.hideLoader {\n\t\tdisplay: none;\n\t}\n\n\t.loader {\n\t\twidth: 100vw;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\topacity: 0.2;\n\t\tbackground-color: gray;\n\t    align-items: center;\n\t    justify-content: center;\n\t}\n\n\t.spinner {\n\t\tborder: 16px solid #f3f3f3;\n\t\tborder-radius: 50%;\n\t\tborder-top: 16px solid #3498db;\n\t\twidth: 80px;\n\t\theight: 80px;\n\t\t-webkit-animation: spin 2s linear infinite; /* Safari */\n\t\tanimation: spin 2s linear infinite;\n\t}\n\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg); }\n\t\t100% { transform: rotate(360deg); }\n\t}\n\n\t#recommendations {\n\t\tpadding-top: 20px;\n\t\tmargin-bottom: 20px\n\t}\n\n\t/*#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 350px);\n\t\tgrid-template-rows: repeat(3, 350px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px;\n\t}*/\n\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(2, 480px);\n\t\tgrid-template-rows: repeat(2, 460px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px;\n\t}\n\n\t#pinnedDrawer {\n\t\theight: 100%;\n\t\twidth: 0;\n\t\tposition: fixed;\n\t\tz-index: 1001;\n\t\ttop: 0;\n\t\tright: 0;\n\t\toverflow: scroll;\n\t\ttransition: 0.5s;\n\t\tpadding-top: 20px;\n\t\tbackground: white;\n\t\tbox-shadow: 195px 8px 10px -5px rgba(0,0,0,0.2), 0px 16px 24px 2px rgba(0,0,0,0.14), 0px 6px 30px 5px rgba(0,0,0,0.12);\n\t}\n\n\t#pinnedText {\n\t\tmargin-left: 30px;\n\t}\n\n\t#pinnedDisplay {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 30px;\n\t\tmargin-left: 30px;\n\t\tmax-width: 500px;\n\t\tpadding-bottom: 30px;\n\t}\n\n\t.deletePin {\n\t\twidth: 350px;\n\t\tmargin: 25px 0px 0px 0px;\n\t}\n\n\t.pinned {\n\t\theight: 350px;\n\t\toverflow: scroll;\n\t}\n\n\t#closeButton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 25px;\n\t\tfont-size: 36px;\n\t\tmargin-left: 50px;\n\t\tcursor: pointer;\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t    padding: 15px;\n\t}\n\n\t.buttons {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.pinButton {\n\t\tmargin-left: auto;\n\t\twidth: 28px;\n    \theight: 28px;\n    \tcolor: gray;\n    \tcursor: pointer;\n    \ttransition: transform 0.5s;\n\t}\n\n\t.isPinned {\n\t\tcolor: green;\n\t    transform: rotate(45deg);\n\t    transition: transform 0.5s;\n\t}\n\n\t.more {\n\t\tbackground-color: #cde09b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.less {\n\t\tbackground-color: #e0a99b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.default {\n\t\tbackground-color: #f4f4f4;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.vegaContainer {\n\t\theight: 400px;\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\n\tlet promise = loadData();\n\tlet participantVis = {\"constraintLearner\": [],\n\t\t\t\t\t\t\"constraintSolver\": [],\n\t\t\t\t\t\t\"granularLearner\": [],}\n\n\tasync function loadData() {\n\t\tconst dataset = await d3.json(`allPinned.json`)\n\n\t\tlet splitData = {\"constraintLearner\": [],\n\t\t\t\t\t\t\"constraintSolver\": [],\n\t\t\t\t\t\t\"granularLearner\": [],}\n\n\t\t\n\n\t\tfor (let d of dataset) {\n\t\t\tif (d.systemType === \"constraintLearner\") {\n\t\t\t\tsplitData[\"constraintLearner\"].push([d.vis1, d.vis2, d.vis3, d.vis4, d.vis5])\n\t\t\t} else if (d.systemType === \"constraintSolver\") {\n\t\t\t\tsplitData[\"constraintSolver\"].push([d.vis1, d.vis2, d.vis3, d.vis4, d.vis5])\n\t\t\t} else {\n\t\t\t\tsplitData[\"granularLearner\"].push([d.vis1, d.vis2, d.vis3, d.vis4, d.vis5])\n\t\t\t}\n\t\t}\n\n\t\t// const firstRow = dataset[0]\n\n\t\t// const types = getType(firstRow)\n\n\t\tparticipantVis = splitData\n\n\t\treturn splitData\n\t}\n\n\t$: for (let i = 0; i < participantVis[\"constraintLearner\"].length; i++) {\n\t\tlet participant = participantVis[\"constraintLearner\"][i]\n\t\tfor (let j = 0; j < 5; j++) {\n\t\t\tlet vis = participant[j][\"vega\"][\"vega\"]\n\t\t\tvis.width = 150\n\t\t\tvis.height = 150\n\t\t\tvegaEmbed(`#learnervis${i}${j}`, vis, {actions:false})\n\t\t}\n\t}\n\n\t$: for (let i = 0; i < participantVis[\"constraintSolver\"].length; i++) {\n\t\tlet participant = participantVis[\"constraintSolver\"][i]\n\t\tfor (let j = 0; j < 5; j++) {\n\t\t\tlet vis = participant[j][\"pinned\"][\"vega\"]\n\t\t\tvis.width = 150\n\t\t\tvis.height = 150\n\t\t\tvegaEmbed(`#solvervis${i}${j}`, vis, {actions:false})\n\t\t}\n\t}\n\n\t$: for (let i = 0; i < participantVis[\"granularLearner\"].length; i++) {\n\t\tlet participant = participantVis[\"granularLearner\"][i]\n\t\tfor (let j = 0; j < 5; j++) {\n\t\t\tlet vis = participant[j][\"vega\"][\"vega\"]\n\t\t\tvis.width = 150\n\t\t\tvis.height = 150\n\t\t\tvegaEmbed(`#granularvis${i}${j}`, vis, {actions:false})\n\t\t}\n\t}\n\n</script>\n\n<div id=\"overall\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then splitData}\n\t\t<div id=\"granular\">\n\t\t\t<h3>Granular Learner</h3>\n\t\t\t{#each Array(6) as participant, i}\n\t\t\t\t<div class=\"participantContainer\">\n\t\t\t\t\t{#each Array(5) as vega, j}\n\t\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t\t<div id=\"granularvis{i}{j}\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t\t<div id=\"learner\">\n\t\t\t<h3>Constraint Learners</h3>\n\t\t\t{#each Array(6) as participant, i}\n\t\t\t\t<div class=\"participantContainer\">\n\t\t\t\t\t{#each Array(5) as vega, j}\n\t\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t\t<div id=\"learnervis{i}{j}\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t\t<div id=\"solver\">\n\t\t\t<h3>Constraint Solver</h3>\n\t\t\t{#each Array(6) as participant, i}\n\t\t\t\t<div class=\"participantContainer\">\n\t\t\t\t\t{#each Array(5) as vega, j}\n\t\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t\t<div id=\"solvervis{i}{j}\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t{/await}\n</div>\n\n<style>\n\t#overall {\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t}\n\n\t.participantContainer {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from \"d3\"\n\n\texport let key = ''\n\texport let options = []\n\texport let selectedMore = []\n\texport let selectedLess = []\n\t// export let total = 10\n\t// export let title = 'More Like This'\n\n\tlet show = false;\n\tlet select_all = true;\n\n\tlet classColor = Array(options.length).fill('default')\n\n\t// console.log(key, options)\n\n\tfunction toggleOptions(value) {\n\t\tvar moreIndex = selectedMore.indexOf(value)\n\t\tvar lessIndex = selectedLess.indexOf(value)\n\t\tif (moreIndex > -1 && lessIndex == -1) {\n\t\t\tselectedMore.splice(moreIndex, 1)\n\t\t\tselectedMore = selectedMore\n\t\t\tselectedLess.push(value)\n\t\t\tselectedLess = selectedLess\n\t\t} else if (lessIndex > -1 && moreIndex == -1) {\n\t\t\tselectedLess.splice(lessIndex, 1)\n\t\t\tselectedLess = selectedLess\n\t\t} else {\n\t\t\tselectedMore.push(value)\n\t\t\tselectedMore = selectedMore\n\t\t}\n\t}\n\n\t$: for (let i = 0; i < options.length; i++) {\n\t\tlet value = options[i]\n\t\tif (selectedMore.indexOf(value) > -1) {\n\t\t\tclassColor[i] = 'more'\n\t\t} else if (selectedLess.indexOf(value) > -1) {\n\t\t\tclassColor[i] = 'less'\n\t\t} else {\n\t\t\tclassColor[i] = 'default'\n\t\t}\n\t}\n\n</script>\n\n<div>\n\t<div class={`${key} toggle`}>\n\t\t{#each options as value, i}\n\t\t\t<div class={`${classColor[i]} attribute`}\n\t\t\t\ton:click|stopPropagation={() => toggleOptions(value)}>\n\t\t\t\t<div class=\"attributeLeft\">{value[0]}</div>\n\t\t\t\t<div class=\"attributeRight\">{value[1]}</div>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.toggle {\n\t\tdisplay: flex;\n    \tflex-wrap: wrap;\n\t}\n\n\t.attribute {\n\t\tmargin-bottom: 5px;\n\t\tdisplay: flex;\n\t    font-size: 12px;\n\t    width: auto;\n\t    cursor: pointer;\n\t}\n\n\t.attributeLeft {\n\t\tborder-radius: 12px 0px 0px 12px;\n    \tborder: steelblue solid 2px;\n    \talign-content: middle;\n    \tpadding: 0px 5px 1px 10px;\n\t}\n\n\t.attributeRight {\n\t\tborder-radius: 0px 12px 12px 0px;\n    \tborder-style: solid solid solid hidden;\n\t    border-color: steelblue;\n\t    border-width: 2px;\n    \talign-content: middle;\n    \tpadding: 0px 10px 1px 5px;\n\t}\n\n\t.more {\n\t\tbackground-color: #cde09b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.less {\n\t\tbackground-color: #e0a99b;\n\t\tmargin-right: 0.5em;\n\t}\n\n\t.default {\n\t\t/*background-color: #f4f4f4;*/\n\t\tmargin-right: 0.5em;\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport Draco from 'draco-vis'\n\n\timport AttributesConstraints from './AttributesConstraints.svelte'\n\timport dracoDataConstraints from './dracoDataConstraints.js'\n\n\texport let participant = -1\n\texport let allParticipantInfo = {}\n\n\texport let dataset = []\n\texport let types = {}\n\texport let selectedAttributes = []\n\t\n\tlet updateCount = 0\n\n\tlet pinned = []\n\tlet currentPinned = []\n\n\tlet attributesConstraints = []\n\n\tlet recommendations = []\n\n\tlet sessionData = []\n\n\t// Track user constraints\n\tlet selectedMark\n\tconst channelDefaults = {\"x\":[], \"y\":[], \"color\":[], \"size\":[], \"shape\":[]}\n\tlet channelSelections = JSON.parse(JSON.stringify(channelDefaults))\n\n\tfunction solveDraco(markConstraints, visConstraints, dataset) {\n\t\t// console.log(newConstraints)\n\t\tlet recs = []\n\n\t\tconst url = 'https://unpkg.com/wasm-clingo@0.2.2'\n\n\t\tconst draco = new Draco(url)\n\t\treturn draco.init().then(() => {\n\t\t\t// Get metadata about dataset\n\t\t\tdraco.prepareData(dataset)\n\t\t\tconst schema = draco.getSchema()\n\t\t\tconst dataConstraints = dracoDataConstraints(schema)\n\n\t\t\t// Create constraints based on schema\n\t\t\tconst inputConstraints = `\n\t\t\t\tdata(\"movies.csv\").\n\t\t\t\tnum_rows(33778).\n\n\t\t\t\t${dataConstraints}\n\n\t\t\t\t${markConstraints}\n\n\t\t\t\t% ====== Query constraints ======\n\t\t\t\t${visConstraints}\n\t\t\t`;\n\n\t\t\tconsole.log(inputConstraints)\n\n\t\t\tconst solution = draco.solve(inputConstraints, { models: 4 });\n\t\t\t\n\t\t\t// console.log(\"solution\", solution)\n\t\t\t\n\t\t\tif (!solution) {\n\t\t\t\tconsole.log('no solution')\n\t\t\t\trecommendations = []\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\t// console.log(\"solution\", solution)\n\n\t\t\tfor (let [i, s] of solution['specs'].entries()) {\n\t\t\t\ts.width = 270\n\t\t\t\ts.height = 270\n\t\t\t\trecs.push({'vega':s, 'uid': 'id' + (new Date().valueOf()) + '_' + i})\n\t\t\t}\n\n\t\t\tconsole.log(recs)\n\n\t\t\trecommendations = recs\n\n\t\t\tsessionData.push({\"markConstraints\":selectedMark,\n\t\t\t\t\t\t\t  \"visConstraints\":channelSelections,\n\t\t\t\t\t\t\t  \"recommendations\": recs,\n\t\t\t\t\t\t\t  \"date\": new Date(),\n\t\t\t\t\t\t\t  \"label\": \"recommendations\"})\n\n\t\t\t// console.log(recommendations)\n\t\t})\n\t}\n\n\tfunction getRecommendations() {\n\t\t// sessionData.push({\"specs\": channelSelections, \"mark\": selectedMark, \"label\": \"constraints\"})\n\t\tlet markConstraints = selectedMark === '' ? '' : `mark(${selectedMark}).`\n\n\t\tlet visConstraints = []\n\t\t// console.log(channelSelections)\n\n\t\tlet encodingCount = 0\n\t\tfor (let c of Object.keys(channelSelections)) {\n\t\t\tif (channelSelections[c].length == 0) {continue}\n\n\t\t\tlet channelValue = channelSelections[c][0].name\n\n\t\t\tif (channelValue === \"categorical\") { channelValue = \"nominal\" }\n\n\t\t\t// console.log(c, channelValue)\n\n\t\t\tif (channelValue && channelValue != '') {\n\t\t\t\tlet newConstraint = `encoding(e${encodingCount}).:- not channel(e${encodingCount}, ${c}).`\n\t\t\t\t\n\t\t\t\tif (channelValue == \"quantitative\" || channelValue == \"nominal\") {\n\t\t\t\t\t// Get channel\n\t\t\t\t\tnewConstraint = newConstraint + `:- not type(e${encodingCount}, ${channelValue}).`\n\n\t\t\t\t} else {\n\t\t\t\t\t// Get field\n\t\t\t\t\tnewConstraint = newConstraint + `:- not field(e${encodingCount}, ${channelValue}).`\n\n\t\t\t\t\tlet agg = channelSelections[c][0].aggregate\n\n\t\t\t\t\tif (agg === \"bin\") {\n\t\t\t\t\t\tnewConstraint = newConstraint + `:- not bin(e${encodingCount}, 10).`\n\t\t\t\t\t} else if (agg != \"-\") {\n\t\t\t\t\t\tnewConstraint = newConstraint + `:- not aggregate(e${encodingCount}, ${agg}).`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvisConstraints.push(newConstraint)\n\t\t\t\tencodingCount++\n\t\t\t}\n\t\t}\n\n\t\tvisConstraints = visConstraints.join('\\n\\n')\n\n\t\tsolveDraco(markConstraints, visConstraints, dataset)\n\t}\n\n\t$: {console.log('update count', updateCount)\n\t\tif (updateCount === 0) {}\n\t\telse {\n\t\t\tgetRecommendations()\n\t\t}}\n\n\t$: for (let rec = 0; rec < recommendations.length; rec++) {\n\t\tif (!recommendations[rec]) {continue}\n\t\tvegaEmbed(`#vis${rec}`, recommendations[rec]['vega'], {actions:false})\n\t}\n\n\t// $: if (channelSelections || selectedMark) {\n\t// \tconsole.log(channelSelections, selectedMark)\n\t// \tupdateCount++\n\t// }\n\n\t// function update() {\n\t// \tupdateCount++\n\t// }\n\n\tfunction reset() {\n\t\tselectedMark = ''\n\t\tchannelSelections = JSON.parse(JSON.stringify(channelDefaults))\n\t\tupdateCount++\n\t}\n\n\t$: for (let p = 0; p < pinned.length; p++) {\n\t\tif (!pinned[p]) {continue}\n\t\tvegaEmbed(`#pin${p}`, pinned[p]['vega'], {actions:false})\n\t}\n\n\tfunction pin(i) {\n\t\t// Pinning is disabled if new recommendations are loading\n\t\tlet selectedUid = recommendations[i].uid\n\t\tlet pinnedIndex = currentPinned.indexOf(selectedUid)\n\t\tif (pinnedIndex === -1) {\n\t\t\tcurrentPinned = [...currentPinned, selectedUid]\n\t\t\tpinned = pinned.concat([recommendations[i]])\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"pinned\": recommendations[i], \"label\": \"pinned\", \"date\": date})\n\t\t} else {\n\t\t\tcurrentPinned.splice(pinnedIndex, 1)\n\t\t\tcurrentPinned = currentPinned\n\n\t\t\tlet newPinned = []\n\n\t\t\tfor (let p of pinned) {\n\t\t\t\tif (p.uid === selectedUid) {\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tnewPinned.push(p)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpinned = newPinned\n\n\t\t\tlet date = new Date()\n\t\t\tsessionData = sessionData.concat({\"pinned\": recommendations[i], \"label\": \"unpinned\", \"date\": date})\n\t\t}\n\n\t\t// console.log(currentPinned)\n\t}\n\n\t// This is for unpinning from the pin drawer\n\tfunction unpin(p) {\n\t\tlet selectedUid = p.uid\n\t\t// console.log(p)\n\n\t\tlet newPinned = []\n\n\t\t// remove deleted from all pins\n\t\tfor (let i of pinned) {\n\t\t\tif (i.uid === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewPinned.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tpinned = newPinned\n\n\t\tlet newCurrentPinned = []\n\n\t\t// remove deleted from current pins\n\t\tfor (let j of currentPinned) {\n\t\t\tif (j === selectedUid) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tnewCurrentPinned.push(j)\n\t\t\t}\n\t\t}\n\n\t\t// update all pins\n\t\tcurrentPinned = newCurrentPinned\n\n\t\tlet date = new Date()\n\t\tsessionData = sessionData.concat({\"chart\": p, \"label\": \"unpinned\", \"date\": date})\n\t}\n\n\tfunction togglePin() {\n\t\tif (document.getElementById(\"pinnedDrawer\").style.width === \"450px\") {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t\t} else {\n\t\t\tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t\t}\n\t}\n\n\t// function showPin() {\n\t// \tdocument.getElementById(\"pinnedDrawer\").style.width = \"450px\"\n\t// }\n\n\t// function closePin() {\n\t// \tdocument.getElementById(\"pinnedDrawer\").style.width = \"0px\"\n\t// }\n\n\tfunction exportJSON() {\n\t\tlet allData = {\"participant\": allParticipantInfo,\n\t\t\t\t\t\t\"session\": sessionData}\n\n\t\tvar filename = `sessionData_${participant}.json`\n\t\tvar element = document.createElement('a');\n\t\telement.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(allData)))\n\t\telement.setAttribute('download', filename)\n\n\t\telement.style.display = 'none'\n\t\tdocument.body.appendChild(element)\n\n\t\telement.click()\n\n\t\tdocument.body.removeChild(element)\n\n\t\tlet downloadData = {\n\t\t\t'filename': filename,\n\t\t\t'data': allData\n\t\t}\n\n\t\tfetch(`./download`, {method:\"POST\", body:JSON.stringify(downloadData)})\n\t}\n</script>\n\n<div id=\"overall\">\n\t<AttributesConstraints bind:selectedMark={selectedMark}\n\t\t\t\t\t\t\tbind:channelSelections={channelSelections}\n\t\t\t\t\t\t\tbind:updateCount={updateCount} />\n\t<div id=\"recommendations\">\n\t\t<div id=\"menu\">\n\t\t\t<p><b>RECOMMENDATIONS</b></p>\n\t\t\t<!-- <button>UPDATE RECOMMENDATIONS</button> -->\n\t\t\t<div id=\"menuOptions\">\n\t\t\t\t<button id=\"pinnedButton\" on:click={togglePin}>PINNED</button>\n\t\t\t\t<button on:click={reset}>RESET</button>\n\t\t\t\t<button id=\"exportJSON\" on:click={exportJSON} class=\"btn\">DOWNLOAD</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"recommendationDisplay\">\n\t\t\t{#each recommendations as c, i}\n\t\t\t\t<div class=\"vis\">\n\t\t\t\t\t<div class:isPinned=\"{recommendations[i] && currentPinned.indexOf(recommendations[i].uid) > -1}\"\n\t\t\t\t\t\tclass=\"pinButton\"\n\t\t\t\t\t\ton:click={() => pin(i)}>\n\t\t\t\t\t\t<i class=\"material-icons-outlined md-24\">push_pin</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vegaContainer\">\n\t\t\t\t\t\t<div id=\"vis{i}\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div id=\"pinnedDrawer\">\n\t\t<p id=\"pinnedText\"><b>PINNED</b></p>\n\t\t<!-- <a id=\"closeButton\" on:click={closePin}>&times;</a> -->\n\t\t<div id=\"pinnedDisplay\">\n\t\t\t{#each pinned as p, i}\n\t\t\t\t<button class=\"deletePin\" on:click={() => unpin(p)}>DELETE PIN</button>\n\t\t\t\t<div id=\"pin{i}\" class=\"pinned\"></div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#overall {\n\t\tdisplay: flex;\n\t\tbackground: #f3f3f3;\n\t\twidth: 100%;\n\t}\n\n\t#menuOptions {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t}\n\n\t#pinnedButton {\n\t\tmargin-right: auto;\n\t}\n\n\t#exportJSON {\n\t\tmargin-left: 5px;\n\t\tmargin-right: 10px;\n\t}\n\n\t#recommendations {\n\t\tpadding-top: 20px;\n\t\tmargin-bottom: 20px\n\t}\n\n\t#recommendationDisplay {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(2, 480px);\n\t\tgrid-template-rows: repeat(2, 460px);\n\t\tgrid-gap: 15px;\n\t\tmargin-top: 50px\n\t}\n\n\t#pinnedDrawer {\n\t\theight: 100%;\n\t\twidth: 0;\n\t\tposition: fixed;\n\t\tz-index: 1001;\n\t\ttop: 0;\n\t\tright: 0;\n\t\toverflow: scroll;\n\t\ttransition: 0.5s;\n\t\tpadding-top: 20px;\n\t\tbackground: white;\n\t\tbox-shadow: 195px 8px 10px -5px rgba(0,0,0,0.2), 0px 16px 24px 2px rgba(0,0,0,0.14), 0px 6px 30px 5px rgba(0,0,0,0.12);\n\t}\n\n\t#pinnedText {\n\t\tmargin-left: 30px;\n\t}\n\n\t#pinnedDisplay {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 30px;\n\t\tmargin-left: 30px;\n\t\tmax-width: 500px;\n\t\tpadding-bottom: 30px;\n\t}\n\n\t.deletePin {\n\t\twidth: 350px;\n\t\tmargin: 25px 0px 0px 0px;\n\t}\n\n\t.pinned {\n\t\theight: 400px;\n\t\toverflow: scroll;\n\t}\n\n\t#closeButton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 25px;\n\t\tfont-size: 36px;\n\t\tmargin-left: 50px;\n\t\tcursor: pointer;\n\t}\n\n\t.vis {\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t    padding: 15px;\n\t}\n\n\t.buttons {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.pinButton {\n\t\tmargin-left: auto;\n\t\tmargin-bottom: 20px;\n\t\twidth: 28px;\n    \theight: 28px;\n    \tcolor: gray;\n    \tcursor: pointer;\n\t}\n\n\t.isPinned {\n\t\tcolor: green;\n\t    transform: rotate(45deg);\n\t    transition: transform 0.5s;\n\t}\n\n\t.vegaContainer {\n\t\theight: 400px;\n\t\toverflow: scroll;\n\t    background: white;\n\t    display: flex;\n\t    flex-direction: column;\n\t}\n</style>\n",
    "<script>\n\timport * as d3 from 'd3'\n\timport GranularRecommendations from './GranularRecommendations.svelte'\n\n\texport let participant = -1\n\texport let allParticipantInfo = {}\n\n\texport let dataset = []\n\texport let types = {}\n\texport let selectedAttributes = []\n\n\tlet promise = loadSpecs();\n\tlet updateCount = 0\n\n\tfunction dataPreprocessor(d) {\n\t\tlet result = {}\n\t\tfor (let i = 0; i < d3.keys(d).length; i++) {\n\t\t\tlet variableName = d3.keys(d)[i]\n\t\t\tif (variableName === 'filename') {}\n\t\t\telse {\n\t\t\t\tresult[variableName] = +d3.values(d)[i]\n\t\t\t}\n\t\t}\n\t    return result\n\t}\n\n\tasync function loadSpecs() {\n\t\tconst specs = await d3.csv(`/manual_specs_one_hot_encoding_4.csv`, dataPreprocessor)\n\n\t\tconst vegaSpecsOriginal = []\n\n\t\tfor (let i in specs) {\n\t\t\tif (i === 'columns') { continue; }\n\t\t\tlet s = specs[i]\n\n\t\t\tdelete s.index\n\n\t\t\tvegaSpecsOriginal.push({ 'spec':s })\n\t\t}\n\n\t\t// console.log(vegaSpecsOriginal.length)\n\n\t\treturn vegaSpecsOriginal\n\t}\n\n\t\n</script>\n\n<div id=\"recommendationsMain\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then vegaSpecsOriginal}\n\t\t<GranularRecommendations\n\t\t\t{participant}\n\t\t\t{allParticipantInfo}\n\t\t\t{dataset}\n\t\t\t{vegaSpecsOriginal}\n\t\t\t{selectedAttributes}\n\t\t\t{updateCount}/>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#recommendationsMain {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n</style>",
    "<script>\n\timport * as d3 from 'd3'\n\timport Recommendations from './Recommendations.svelte'\n\n\texport let participant = -1\n\texport let allParticipantInfo = {}\n\n\texport let dataset = []\n\texport let types = {}\n\texport let selectedAttributes = []\n\n\tlet promise = loadSpecs();\n\tlet updateCount = 0\n\n\tfunction dataPreprocessor(d) {\n\t\tlet result = {}\n\t\tfor (let i = 0; i < d3.keys(d).length; i++) {\n\t\t\tlet variableName = d3.keys(d)[i]\n\t\t\tif (variableName === 'filename') {}\n\t\t\telse {\n\t\t\t\tresult[variableName] = +d3.values(d)[i]\n\t\t\t}\n\t\t}\n\t    return result\n\t}\n\n\tasync function loadSpecs() {\n\t\tconst specs = await d3.csv(`/manual_specs_one_hot_encoding_4.csv`, dataPreprocessor)\n\n\t\tconst vegaSpecsOriginal = []\n\n\t\tfor (let i in specs) {\n\t\t\tif (i === 'columns') { continue; }\n\t\t\tlet s = specs[i]\n\n\t\t\tdelete s.index\n\n\t\t\tvegaSpecsOriginal.push({ 'spec':s })\n\t\t}\n\n\t\t// console.log(vegaSpecsOriginal.length)\n\n\t\treturn vegaSpecsOriginal\n\t}\n\n\t\n</script>\n\n<div id=\"recommendationsMain\">\n\t{#await promise}\n\t\t<p>...loading</p>\n\t{:then vegaSpecsOriginal}\n\t\t<Recommendations\n\t\t\t{participant}\n\t\t\t{allParticipantInfo}\n\t\t\t{dataset}\n\t\t\t{vegaSpecsOriginal}\n\t\t\t{selectedAttributes}\n\t\t\t{updateCount}/>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\t#recommendationsMain {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}